{"interfaceLanguages":{"swift":[{"children":[{"title":"Essentials","type":"groupMarker"},{"path":"\/documentation\/libp2p\/gettingstarted","title":"GettingStarted","type":"article"},{"title":"Examples","type":"groupMarker"},{"children":[{"title":"Manually Creating an executable app","type":"groupMarker"},{"path":"\/tutorials\/libp2p\/create-executable-package","title":"Manually creating an executable swift-libp2p app","type":"project"},{"title":"Creating an executable app by Cloning a Template","type":"groupMarker"},{"path":"\/tutorials\/libp2p\/clone-executable-template","title":"Cloning an executable swift-libp2p template app","type":"project"},{"title":"Configuring a swift-libp2p app","type":"groupMarker"},{"path":"\/tutorials\/libp2p\/configure-echo-server","title":"Configuring an Echo Server","type":"project"}],"path":"\/tutorials\/echoserver","title":"Getting started with libp2p","type":"overview"},{"title":"Classes","type":"groupMarker"},{"children":[{"title":"Classes","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/libp2p\/application\/locks-swift.class\/main","title":"let main: Lock","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/libp2p\/application\/locks-swift.class\/lock(for:)","title":"func lock<Key>(for: Key.Type) -> Lock","type":"method"}],"path":"\/documentation\/libp2p\/application\/locks-swift.class","title":"Application.Locks","type":"class"},{"children":[{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/libp2p\/application\/singlerequest\/style\/noresponseexpected","title":"case noResponseExpected","type":"case"},{"path":"\/documentation\/libp2p\/application\/singlerequest\/style\/responseexpected","title":"case responseExpected","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/libp2p\/application\/singlerequest\/style\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/libp2p\/application\/singlerequest\/style\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/libp2p\/application\/singlerequest\/style","title":"Application.SingleRequest.Style","type":"enum"}],"path":"\/documentation\/libp2p\/application\/singlerequest","title":"Application.SingleRequest","type":"class"},{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/libp2p\/application\/childchannelhandlers\/provider\/init(_:)","title":"init((Connection) -> ([ChannelHandler]))","type":"init"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/libp2p\/application\/childchannelhandlers\/provider\/inboundlogger","title":"static var inboundLogger: Application.ChildChannelHandlers.Provider","type":"property"},{"path":"\/documentation\/libp2p\/application\/childchannelhandlers\/provider\/linebasedframedecoder","title":"static var lineBasedFrameDecoder: Application.ChildChannelHandlers.Provider","type":"property"},{"path":"\/documentation\/libp2p\/application\/childchannelhandlers\/provider\/linebasedframeencoder","title":"static var lineBasedFrameEncoder: Application.ChildChannelHandlers.Provider","type":"property"},{"path":"\/documentation\/libp2p\/application\/childchannelhandlers\/provider\/loggers","title":"static var loggers: Application.ChildChannelHandlers.Provider","type":"property"},{"path":"\/documentation\/libp2p\/application\/childchannelhandlers\/provider\/newlinedelimited","title":"static var newLineDelimited: Application.ChildChannelHandlers.Provider","type":"property"},{"path":"\/documentation\/libp2p\/application\/childchannelhandlers\/provider\/outboundlogger","title":"static var outboundLogger: Application.ChildChannelHandlers.Provider","type":"property"},{"path":"\/documentation\/libp2p\/application\/childchannelhandlers\/provider\/varintframedecoder","title":"static var varIntFrameDecoder: Application.ChildChannelHandlers.Provider","type":"property"},{"path":"\/documentation\/libp2p\/application\/childchannelhandlers\/provider\/varintframeencoder","title":"static var varIntFrameEncoder: Application.ChildChannelHandlers.Provider","type":"property"},{"path":"\/documentation\/libp2p\/application\/childchannelhandlers\/provider\/varintlengthprefixed","title":"static var varIntLengthPrefixed: Application.ChildChannelHandlers.Provider","type":"property"}],"path":"\/documentation\/libp2p\/application\/childchannelhandlers\/provider","title":"Application.ChildChannelHandlers.Provider","type":"struct"}],"path":"\/documentation\/libp2p\/application\/childchannelhandlers","title":"Application.ChildChannelHandlers","type":"struct"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/libp2p\/application\/clients-swift.struct\/provider\/init(_:)","title":"init((Application) -> ())","type":"init"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/libp2p\/application\/clients-swift.struct\/provider\/tcp","title":"static var tcp: Application.Clients.Provider","type":"property"}],"path":"\/documentation\/libp2p\/application\/clients-swift.struct\/provider","title":"Application.Clients.Provider","type":"struct"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/libp2p\/application\/clients-swift.struct\/application","title":"let application: Application","type":"property"},{"path":"\/documentation\/libp2p\/application\/clients-swift.struct\/available","title":"var available: [String]","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/libp2p\/application\/clients-swift.struct\/client(for:)","title":"func client(for: Client.Type) -> Client?","type":"method"},{"path":"\/documentation\/libp2p\/application\/clients-swift.struct\/client(forkey:)","title":"func client(forKey: String) -> Client?","type":"method"},{"path":"\/documentation\/libp2p\/application\/clients-swift.struct\/dump()","title":"func dump()","type":"method"},{"path":"\/documentation\/libp2p\/application\/clients-swift.struct\/use(_:)","title":"func use(Application.Clients.Provider)","type":"method"},{"path":"\/documentation\/libp2p\/application\/clients-swift.struct\/use(key:_:)","title":"func use(key: String, (Application) -> (Client))","type":"method"}],"path":"\/documentation\/libp2p\/application\/clients-swift.struct","title":"Application.Clients","type":"struct"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/libp2p\/application\/connections-swift.struct\/provider\/init(_:)","title":"init((Application) -> ())","type":"init"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/libp2p\/application\/connections-swift.struct\/provider\/default","title":"static var `default`: Application.Connections.Provider","type":"property"}],"path":"\/documentation\/libp2p\/application\/connections-swift.struct\/provider","title":"Application.Connections.Provider","type":"struct"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/libp2p\/application\/connections-swift.struct\/use(_:)-13btv","title":"func use(Application.Connections.Provider)","type":"method"},{"path":"\/documentation\/libp2p\/application\/connections-swift.struct\/use(_:)-48qhm","title":"func use((Application) -> (ConnectionManager))","type":"method"}],"path":"\/documentation\/libp2p\/application\/connections-swift.struct","title":"Application.Connections","type":"struct"},{"path":"\/documentation\/libp2p\/application\/core","title":"Application.Core","type":"struct"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/libp2p\/application\/dhtservices\/provider\/init(_:)","title":"init((Application) -> ())","type":"init"}],"path":"\/documentation\/libp2p\/application\/dhtservices\/provider","title":"Application.DHTServices.Provider","type":"struct"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/libp2p\/application\/dhtservices\/application","title":"let application: Application","type":"property"},{"path":"\/documentation\/libp2p\/application\/dhtservices\/available","title":"var available: [String]","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/libp2p\/application\/dhtservices\/dump()","title":"func dump()","type":"method"},{"path":"\/documentation\/libp2p\/application\/dhtservices\/service(for:)","title":"func service<DHT>(for: DHT.Type) -> DHT?","type":"method"},{"path":"\/documentation\/libp2p\/application\/dhtservices\/service(forkey:)","title":"func service(forKey: String) -> DHTCore?","type":"method"},{"path":"\/documentation\/libp2p\/application\/dhtservices\/use(_:)-3pptp","title":"func use(Application.DHTServices.Provider)","type":"method"},{"path":"\/documentation\/libp2p\/application\/dhtservices\/use(_:)-c9bz","title":"func use<DHT>((Application) -> (DHT))","type":"method"}],"path":"\/documentation\/libp2p\/application\/dhtservices","title":"Application.DHTServices","type":"struct"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/libp2p\/application\/discoveryservices\/provider\/init(_:)","title":"init((Application) -> ())","type":"init"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/libp2p\/application\/discoveryservices\/provider\/bootstrap","title":"static var bootstrap: Application.DiscoveryServices.Provider","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/libp2p\/application\/discoveryservices\/provider\/bootstrap(_:)-42kb9","title":"static func bootstrap([PeerInfo]) -> Application.DiscoveryServices.Provider","type":"method"},{"path":"\/documentation\/libp2p\/application\/discoveryservices\/provider\/bootstrap(_:)-57l8z","title":"static func bootstrap([Multiaddr]) -> Application.DiscoveryServices.Provider","type":"method"},{"path":"\/documentation\/libp2p\/application\/discoveryservices\/provider\/bootstrap(_:)-6n7vy","title":"static func bootstrap([String]) -> Application.DiscoveryServices.Provider","type":"method"}],"path":"\/documentation\/libp2p\/application\/discoveryservices\/provider","title":"Application.DiscoveryServices.Provider","type":"struct"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/libp2p\/application\/discoveryservices\/application","title":"let application: Application","type":"property"},{"path":"\/documentation\/libp2p\/application\/discoveryservices\/available","title":"var available: [String]","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/libp2p\/application\/discoveryservices\/announce(_:)","title":"func announce(Application.DiscoveryServices.ServiceRegistration) -> EventLoopFuture<TimeAmount>","type":"method"},{"path":"\/documentation\/libp2p\/application\/discoveryservices\/dump()","title":"func dump()","type":"method"},{"path":"\/documentation\/libp2p\/application\/discoveryservices\/onpeerdiscovered(_:closure:)","title":"func onPeerDiscovered(AnyObject, closure: (PeerInfo) -> ())","type":"method"},{"path":"\/documentation\/libp2p\/application\/discoveryservices\/service(for:)","title":"func service<D>(for: D.Type) -> D?","type":"method"},{"path":"\/documentation\/libp2p\/application\/discoveryservices\/service(forkey:)","title":"func service(forKey: String) -> Discovery?","type":"method"},{"path":"\/documentation\/libp2p\/application\/discoveryservices\/use(_:)-1bviu","title":"func use(Application.DiscoveryServices.Provider)","type":"method"},{"path":"\/documentation\/libp2p\/application\/discoveryservices\/use(_:)-3yt1q","title":"func use<D>((Application) -> (D))","type":"method"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/libp2p\/application\/discoveryservices\/errors\/nodiscoveryservicesavailable","title":"case noDiscoveryServicesAvailable","type":"case"},{"path":"\/documentation\/libp2p\/application\/discoveryservices\/errors\/notyetimplemented","title":"case notYetImplemented","type":"case"},{"path":"\/documentation\/libp2p\/application\/discoveryservices\/errors\/unabletoregisterservice","title":"case unableToRegisterService","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/libp2p\/application\/discoveryservices\/errors\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/libp2p\/application\/discoveryservices\/errors\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/libp2p\/application\/discoveryservices\/errors\/localizeddescription","title":"var localizedDescription: String","type":"property"}],"path":"\/documentation\/libp2p\/application\/discoveryservices\/errors\/error-implementations","title":"Error Implementations","type":"symbol"}],"path":"\/documentation\/libp2p\/application\/discoveryservices\/errors","title":"Application.DiscoveryServices.Errors","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/libp2p\/application\/discoveryservices\/serviceregistration\/allregisteredroutes","title":"case allRegisteredRoutes","type":"case"},{"path":"\/documentation\/libp2p\/application\/discoveryservices\/serviceregistration\/service(_:)","title":"case service(String)","type":"case"}],"path":"\/documentation\/libp2p\/application\/discoveryservices\/serviceregistration","title":"Application.DiscoveryServices.ServiceRegistration","type":"enum"}],"path":"\/documentation\/libp2p\/application\/discoveryservices","title":"Application.DiscoveryServices","type":"struct"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/libp2p\/application\/events-swift.struct\/provider\/init(_:)","title":"init((Application) -> ())","type":"init"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/libp2p\/application\/events-swift.struct\/provider\/default","title":"static var `default`: Application.Events.Provider","type":"property"}],"path":"\/documentation\/libp2p\/application\/events-swift.struct\/provider","title":"Application.Events.Provider","type":"struct"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/libp2p\/application\/events-swift.struct\/use(_:)-2fl65","title":"func use(Application.Events.Provider)","type":"method"},{"path":"\/documentation\/libp2p\/application\/events-swift.struct\/use(_:)-3en0","title":"func use((Application) -> (EventBus))","type":"method"}],"path":"\/documentation\/libp2p\/application\/events-swift.struct","title":"Application.Events","type":"struct"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/libp2p\/application\/identify-swift.struct\/provider\/init(_:)","title":"init((Application) -> ())","type":"init"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/libp2p\/application\/identify-swift.struct\/provider\/default","title":"static var `default`: Application.Identify.Provider","type":"property"}],"path":"\/documentation\/libp2p\/application\/identify-swift.struct\/provider","title":"Application.Identify.Provider","type":"struct"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/libp2p\/application\/identify-swift.struct\/use(_:)-99j5j","title":"func use((Application) -> (IdentityManager))","type":"method"},{"path":"\/documentation\/libp2p\/application\/identify-swift.struct\/use(_:)-9adyt","title":"func use(Application.Identify.Provider)","type":"method"}],"path":"\/documentation\/libp2p\/application\/identify-swift.struct","title":"Application.Identify","type":"struct"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/libp2p\/application\/lifecycle-swift.struct\/use(_:)","title":"func use(LifecycleHandler)","type":"method"}],"path":"\/documentation\/libp2p\/application\/lifecycle-swift.struct","title":"Application.Lifecycle","type":"struct"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/libp2p\/application\/muxerupgraders\/provider\/init(_:)","title":"init((Application) -> ())","type":"init"}],"path":"\/documentation\/libp2p\/application\/muxerupgraders\/provider","title":"Application.MuxerUpgraders.Provider","type":"struct"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/libp2p\/application\/muxerupgraders\/application","title":"let application: Application","type":"property"},{"path":"\/documentation\/libp2p\/application\/muxerupgraders\/available","title":"var available: [String]","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/libp2p\/application\/muxerupgraders\/dump()","title":"func dump()","type":"method"},{"path":"\/documentation\/libp2p\/application\/muxerupgraders\/upgrader(for:)","title":"func upgrader<M>(for: M.Type) -> M?","type":"method"},{"path":"\/documentation\/libp2p\/application\/muxerupgraders\/upgrader(forkey:)","title":"func upgrader(forKey: String) -> MuxerUpgrader?","type":"method"},{"path":"\/documentation\/libp2p\/application\/muxerupgraders\/use(_:)-7z5je","title":"func use<M>((Application) -> (M))","type":"method"},{"path":"\/documentation\/libp2p\/application\/muxerupgraders\/use(_:)-8y2b1","title":"func use(Application.MuxerUpgraders.Provider...)","type":"method"},{"path":"\/documentation\/libp2p\/application\/muxerupgraders\/use(_:)-9dzd8","title":"func use(Application.MuxerUpgraders.Provider)","type":"method"}],"path":"\/documentation\/libp2p\/application\/muxerupgraders","title":"Application.MuxerUpgraders","type":"struct"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/libp2p\/application\/peerstores\/provider\/init(_:)","title":"init((Application) -> ())","type":"init"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/libp2p\/application\/peerstores\/provider\/default","title":"static var `default`: Application.PeerStores.Provider","type":"property"}],"path":"\/documentation\/libp2p\/application\/peerstores\/provider","title":"Application.PeerStores.Provider","type":"struct"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/libp2p\/application\/peerstores\/use(_:)-1gig3","title":"func use((Application) -> (PeerStore))","type":"method"},{"path":"\/documentation\/libp2p\/application\/peerstores\/use(_:)-1syzx","title":"func use(Application.PeerStores.Provider)","type":"method"}],"path":"\/documentation\/libp2p\/application\/peerstores","title":"Application.PeerStores","type":"struct"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/libp2p\/application\/pubsubservices\/provider\/init(_:)","title":"init((Application) -> ())","type":"init"}],"path":"\/documentation\/libp2p\/application\/pubsubservices\/provider","title":"Application.PubSubServices.Provider","type":"struct"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/libp2p\/application\/pubsubservices\/application","title":"let application: Application","type":"property"},{"path":"\/documentation\/libp2p\/application\/pubsubservices\/available","title":"var available: [String]","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/libp2p\/application\/pubsubservices\/dump()","title":"func dump()","type":"method"},{"path":"\/documentation\/libp2p\/application\/pubsubservices\/publish(_:totopic:)","title":"func publish([UInt8], toTopic: String) -> EventLoopFuture<Application.PubSubServices.PublishedResults>","type":"method"},{"path":"\/documentation\/libp2p\/application\/pubsubservices\/service(for:)","title":"func service<P>(for: P.Type) -> P?","type":"method"},{"path":"\/documentation\/libp2p\/application\/pubsubservices\/service(forkey:)","title":"func service(forKey: String) -> PubSubCore?","type":"method"},{"path":"\/documentation\/libp2p\/application\/pubsubservices\/subscribe(_:)","title":"func subscribe(PubSub.SubscriptionConfig) throws -> PubSub.SubscriptionHandler","type":"method"},{"path":"\/documentation\/libp2p\/application\/pubsubservices\/subscribe(_:on:)","title":"func subscribe(PubSub.SubscriptionConfig, on: EventLoop?) -> EventLoopFuture<Void>","type":"method"},{"path":"\/documentation\/libp2p\/application\/pubsubservices\/unsubscribe(topic:on:)","title":"func unsubscribe(topic: String, on: EventLoop?) -> EventLoopFuture<Void>","type":"method"},{"path":"\/documentation\/libp2p\/application\/pubsubservices\/use(_:)-3ohze","title":"func use<P>((Application) -> (P))","type":"method"},{"path":"\/documentation\/libp2p\/application\/pubsubservices\/use(_:)-3yzw1","title":"func use(Application.PubSubServices.Provider)","type":"method"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/libp2p\/application\/pubsubservices\/errors\/nopubsubservicesavailable","title":"case noPubSubServicesAvailable","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/libp2p\/application\/pubsubservices\/errors\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/libp2p\/application\/pubsubservices\/errors\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/libp2p\/application\/pubsubservices\/errors\/localizeddescription","title":"var localizedDescription: String","type":"property"}],"path":"\/documentation\/libp2p\/application\/pubsubservices\/errors\/error-implementations","title":"Error Implementations","type":"symbol"}],"path":"\/documentation\/libp2p\/application\/pubsubservices\/errors","title":"Application.PubSubServices.Errors","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/libp2p\/application\/pubsubservices\/publishedresults\/failed(_:)","title":"case failed(Error)","type":"case"},{"path":"\/documentation\/libp2p\/application\/pubsubservices\/publishedresults\/publishedtopeers(_:)","title":"case publishedToPeers(Int)","type":"case"},{"path":"\/documentation\/libp2p\/application\/pubsubservices\/publishedresults\/storedlocally","title":"case storedLocally","type":"case"}],"path":"\/documentation\/libp2p\/application\/pubsubservices\/publishedresults","title":"Application.PubSubServices.PublishedResults","type":"enum"}],"path":"\/documentation\/libp2p\/application\/pubsubservices","title":"Application.PubSubServices","type":"struct"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/libp2p\/application\/resolvers-swift.struct\/provider\/init(_:)","title":"init((Application) -> ())","type":"init"}],"path":"\/documentation\/libp2p\/application\/resolvers-swift.struct\/provider","title":"Application.Resolvers.Provider","type":"struct"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/libp2p\/application\/resolvers-swift.struct\/use(_:)-3l3ee","title":"func use<R>((Application) -> (R))","type":"method"},{"path":"\/documentation\/libp2p\/application\/resolvers-swift.struct\/use(_:)-9i5b0","title":"func use(Application.Resolvers.Provider)","type":"method"}],"path":"\/documentation\/libp2p\/application\/resolvers-swift.struct","title":"Application.Resolvers","type":"struct"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/libp2p\/application\/responder-swift.struct\/provider\/init(_:)","title":"init((Application) -> ())","type":"init"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/libp2p\/application\/responder-swift.struct\/provider\/default","title":"static var `default`: Application.Responder.Provider","type":"property"}],"path":"\/documentation\/libp2p\/application\/responder-swift.struct\/provider","title":"Application.Responder.Provider","type":"struct"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/libp2p\/application\/responder-swift.struct\/application","title":"let application: Application","type":"property"},{"path":"\/documentation\/libp2p\/application\/responder-swift.struct\/current","title":"var current: Responder","type":"property"},{"path":"\/documentation\/libp2p\/application\/responder-swift.struct\/default","title":"var `default`: Responder","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/libp2p\/application\/responder-swift.struct\/use(_:)-79pv3","title":"func use((Application) -> (Responder))","type":"method"},{"path":"\/documentation\/libp2p\/application\/responder-swift.struct\/use(_:)-8st57","title":"func use(Application.Responder.Provider)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/libp2p\/application\/responder-swift.struct\/pipelineconfig(for:on:)","title":"func pipelineConfig(for: String, on: Connection) -> [ChannelHandler]?","type":"method"},{"path":"\/documentation\/libp2p\/application\/responder-swift.struct\/respond(to:)","title":"func respond(to: Request) -> EventLoopFuture<Response>","type":"method"}],"path":"\/documentation\/libp2p\/application\/responder-swift.struct\/responder-implementations","title":"Responder Implementations","type":"symbol"}],"path":"\/documentation\/libp2p\/application\/responder-swift.struct","title":"Application.Responder","type":"struct"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/libp2p\/application\/running-swift.struct\/onstop","title":"var onStop: EventLoopFuture<Void>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/libp2p\/application\/running-swift.struct\/stop()","title":"func stop()","type":"method"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/libp2p\/application\/running-swift.struct\/start(using:)","title":"static func start(using: EventLoopPromise<Void>) -> Application.Running","type":"method"}],"path":"\/documentation\/libp2p\/application\/running-swift.struct","title":"Application.Running","type":"struct"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/libp2p\/application\/securityupgraders\/provider\/init(_:)","title":"init((Application) -> ())","type":"init"}],"path":"\/documentation\/libp2p\/application\/securityupgraders\/provider","title":"Application.SecurityUpgraders.Provider","type":"struct"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/libp2p\/application\/securityupgraders\/application","title":"let application: Application","type":"property"},{"path":"\/documentation\/libp2p\/application\/securityupgraders\/available","title":"var available: [String]","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/libp2p\/application\/securityupgraders\/dump()","title":"func dump()","type":"method"},{"path":"\/documentation\/libp2p\/application\/securityupgraders\/upgrader(for:)","title":"func upgrader<S>(for: S.Type) -> S?","type":"method"},{"path":"\/documentation\/libp2p\/application\/securityupgraders\/upgrader(forkey:)","title":"func upgrader(forKey: String) -> SecurityUpgrader?","type":"method"},{"path":"\/documentation\/libp2p\/application\/securityupgraders\/use(_:)-27tcu","title":"func use(Application.SecurityUpgraders.Provider)","type":"method"},{"path":"\/documentation\/libp2p\/application\/securityupgraders\/use(_:)-8wfq","title":"func use(Application.SecurityUpgraders.Provider...)","type":"method"},{"path":"\/documentation\/libp2p\/application\/securityupgraders\/use(_:)-9gzyb","title":"func use<S>((Application) -> (S))","type":"method"}],"path":"\/documentation\/libp2p\/application\/securityupgraders","title":"Application.SecurityUpgraders","type":"struct"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/libp2p\/application\/servers-swift.struct\/provider\/init(_:)","title":"init((Application) -> ())","type":"init"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/libp2p\/application\/servers-swift.struct\/provider\/tcp","title":"static var tcp: Application.Servers.Provider","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/libp2p\/application\/servers-swift.struct\/provider\/tcp(host:port:)","title":"static func tcp(host: String, port: Int) -> Application.Servers.Provider","type":"method"}],"path":"\/documentation\/libp2p\/application\/servers-swift.struct\/provider","title":"Application.Servers.Provider","type":"struct"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/libp2p\/application\/servers-swift.struct\/available","title":"var available: [String]","type":"property"},{"path":"\/documentation\/libp2p\/application\/servers-swift.struct\/command","title":"var command: ServeCommand","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/libp2p\/application\/servers-swift.struct\/server(for:)","title":"func server<S>(for: S.Type) -> S?","type":"method"},{"path":"\/documentation\/libp2p\/application\/servers-swift.struct\/server(forkey:)","title":"func server(forKey: String) -> Server?","type":"method"},{"path":"\/documentation\/libp2p\/application\/servers-swift.struct\/use(_:)-5y8lo","title":"func use(Application.Servers.Provider)","type":"method"},{"path":"\/documentation\/libp2p\/application\/servers-swift.struct\/use(_:)-92b3u","title":"func use<S>((Application) -> (S))","type":"method"}],"path":"\/documentation\/libp2p\/application\/servers-swift.struct","title":"Application.Servers","type":"struct"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/libp2p\/application\/tcp-swift.struct\/client-swift.struct\/configuration","title":"var configuration: TCPClient.Configuration","type":"property"},{"path":"\/documentation\/libp2p\/application\/tcp-swift.struct\/client-swift.struct\/shared","title":"var shared: TCPClient","type":"property"}],"path":"\/documentation\/libp2p\/application\/tcp-swift.struct\/client-swift.struct","title":"Application.TCP.Client","type":"struct"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/libp2p\/application\/tcp-swift.struct\/server-swift.struct\/configuration","title":"var configuration: TCPServer.Configuration","type":"property"},{"path":"\/documentation\/libp2p\/application\/tcp-swift.struct\/server-swift.struct\/shared","title":"var shared: TCPServer","type":"property"}],"path":"\/documentation\/libp2p\/application\/tcp-swift.struct\/server-swift.struct","title":"Application.TCP.Server","type":"struct"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/libp2p\/application\/tcp-swift.struct\/application","title":"let application: Application","type":"property"},{"path":"\/documentation\/libp2p\/application\/tcp-swift.struct\/client-swift.property","title":"var client: Application.TCP.Client","type":"property"},{"path":"\/documentation\/libp2p\/application\/tcp-swift.struct\/server-swift.property","title":"var server: Application.TCP.Server","type":"property"}],"path":"\/documentation\/libp2p\/application\/tcp-swift.struct","title":"Application.TCP","type":"struct"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/libp2p\/application\/topologyregistrations\/application","title":"let application: Application","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/libp2p\/application\/topologyregistrations\/dump()","title":"func dump()","type":"method"},{"path":"\/documentation\/libp2p\/application\/topologyregistrations\/register(_:)","title":"func register(TopologyRegistration)","type":"method"},{"path":"\/documentation\/libp2p\/application\/topologyregistrations\/shutdown(_:)","title":"func shutdown(Application)","type":"method"},{"path":"\/documentation\/libp2p\/application\/topologyregistrations\/willboot(_:)","title":"func willBoot(Application) throws","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/libp2p\/application\/topologyregistrations\/didboot(_:)","title":"func didBoot(Application) throws","type":"method"}],"path":"\/documentation\/libp2p\/application\/topologyregistrations\/lifecyclehandler-implementations","title":"LifecycleHandler Implementations","type":"symbol"}],"path":"\/documentation\/libp2p\/application\/topologyregistrations","title":"Application.TopologyRegistrations","type":"struct"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/libp2p\/application\/transportupgraders-swift.struct\/provider\/init(_:)","title":"init((Application) -> ())","type":"init"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/libp2p\/application\/transportupgraders-swift.struct\/provider\/mss","title":"static var mss: Application.TransportUpgraders.Provider","type":"property"}],"path":"\/documentation\/libp2p\/application\/transportupgraders-swift.struct\/provider","title":"Application.TransportUpgraders.Provider","type":"struct"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/libp2p\/application\/transportupgraders-swift.struct\/application","title":"let application: Application","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/libp2p\/application\/transportupgraders-swift.struct\/use(_:)-632nq","title":"func use((Application) -> (TransportUpgrader))","type":"method"},{"path":"\/documentation\/libp2p\/application\/transportupgraders-swift.struct\/use(_:)-brqw","title":"func use(Application.TransportUpgraders.Provider)","type":"method"}],"path":"\/documentation\/libp2p\/application\/transportupgraders-swift.struct","title":"Application.TransportUpgraders","type":"struct"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/libp2p\/application\/transports-swift.struct\/provider\/init(_:)","title":"init((Application) -> ())","type":"init"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/libp2p\/application\/transports-swift.struct\/provider\/tcp","title":"static var tcp: Application.Transports.Provider","type":"property"}],"path":"\/documentation\/libp2p\/application\/transports-swift.struct\/provider","title":"Application.Transports.Provider","type":"struct"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/libp2p\/application\/transports-swift.struct\/application","title":"let application: Application","type":"property"},{"path":"\/documentation\/libp2p\/application\/transports-swift.struct\/available","title":"var available: [String]","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/libp2p\/application\/transports-swift.struct\/candial(_:on:)","title":"func canDial(Multiaddr, on: EventLoop) -> EventLoopFuture<Bool>","type":"method"},{"path":"\/documentation\/libp2p\/application\/transports-swift.struct\/candialany(_:on:)","title":"func canDialAny([Multiaddr], on: EventLoop) -> EventLoopFuture<Multiaddr>","type":"method"},{"path":"\/documentation\/libp2p\/application\/transports-swift.struct\/dialableaddress(_:externaladdressesonly:on:)","title":"func dialableAddress([Multiaddr], externalAddressesOnly: Bool, on: EventLoop) -> EventLoopFuture<[Multiaddr]>","type":"method"},{"path":"\/documentation\/libp2p\/application\/transports-swift.struct\/dump()","title":"func dump()","type":"method"},{"path":"\/documentation\/libp2p\/application\/transports-swift.struct\/stripinternaladdresses(_:)","title":"func stripInternalAddresses([Multiaddr]) -> [Multiaddr]","type":"method"},{"path":"\/documentation\/libp2p\/application\/transports-swift.struct\/transport(for:)","title":"func transport(for: Transport.Type) -> Transport?","type":"method"},{"path":"\/documentation\/libp2p\/application\/transports-swift.struct\/transport(forkey:)","title":"func transport(forKey: String) -> Transport?","type":"method"},{"path":"\/documentation\/libp2p\/application\/transports-swift.struct\/use(_:)","title":"func use(Application.Transports.Provider)","type":"method"},{"path":"\/documentation\/libp2p\/application\/transports-swift.struct\/use(key:_:)","title":"func use(key: String, (Application) -> (Transport))","type":"method"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/libp2p\/application\/transports-swift.struct\/errors\/notransportsformultiaddr(_:)","title":"case noTransportsForMultiaddr(Multiaddr)","type":"case"},{"path":"\/documentation\/libp2p\/application\/transports-swift.struct\/errors\/notransportsformultiaddrs(_:)","title":"case noTransportsForMultiaddrs([Multiaddr])","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/libp2p\/application\/transports-swift.struct\/errors\/localizeddescription","title":"var localizedDescription: String","type":"property"}],"path":"\/documentation\/libp2p\/application\/transports-swift.struct\/errors\/error-implementations","title":"Error Implementations","type":"symbol"}],"path":"\/documentation\/libp2p\/application\/transports-swift.struct\/errors","title":"Application.Transports.Errors","type":"enum"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/libp2p\/application\/transports-swift.struct\/findbest(formultiaddr:)","title":"func findBest(forMultiaddr: Multiaddr) throws -> Transport","type":"method"},{"path":"\/documentation\/libp2p\/application\/transports-swift.struct\/getall()","title":"func getAll() -> [Transport]","type":"method"}],"path":"\/documentation\/libp2p\/application\/transports-swift.struct\/transportmanager-implementations","title":"TransportManager Implementations","type":"symbol"}],"path":"\/documentation\/libp2p\/application\/transports-swift.struct","title":"Application.Transports","type":"struct"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/libp2p\/application\/init(_:peerid:eventloopgroupprovider:)","title":"init(Environment, peerID: PeerID, eventLoopGroupProvider: Application.EventLoopGroupProvider)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/libp2p\/application\/allocator","title":"var allocator: ByteBufferAllocator","type":"property"},{"path":"\/documentation\/libp2p\/application\/clients-swift.property","title":"var clients: Application.Clients","type":"property"},{"path":"\/documentation\/libp2p\/application\/commands","title":"var commands: Commands","type":"property"},{"path":"\/documentation\/libp2p\/application\/connectionmanager","title":"var connectionManager: Application.Connections","type":"property"},{"path":"\/documentation\/libp2p\/application\/connections-swift.property","title":"var connections: ConnectionManager","type":"property"},{"path":"\/documentation\/libp2p\/application\/console","title":"var console: Console","type":"property"},{"path":"\/documentation\/libp2p\/application\/dht","title":"var dht: Application.DHTServices","type":"property"},{"path":"\/documentation\/libp2p\/application\/didshutdown","title":"var didShutdown: Bool","type":"property"},{"path":"\/documentation\/libp2p\/application\/discovery","title":"var discovery: Application.DiscoveryServices","type":"property"},{"path":"\/documentation\/libp2p\/application\/environment","title":"var environment: Environment","type":"property"},{"path":"\/documentation\/libp2p\/application\/eventloopgroup","title":"let eventLoopGroup: EventLoopGroup","type":"property"},{"path":"\/documentation\/libp2p\/application\/eventloopgroupprovider-swift.property","title":"let eventLoopGroupProvider: Application.EventLoopGroupProvider","type":"property"},{"path":"\/documentation\/libp2p\/application\/eventbus","title":"var eventbus: Application.Events","type":"property"},{"path":"\/documentation\/libp2p\/application\/events-swift.property","title":"var events: EventBus","type":"property"},{"path":"\/documentation\/libp2p\/application\/fileio","title":"var fileio: NonBlockingFileIO","type":"property"},{"path":"\/documentation\/libp2p\/application\/identify-swift.property","title":"var identify: IdentityManager","type":"property"},{"path":"\/documentation\/libp2p\/application\/identitymanager","title":"var identityManager: Application.Identify","type":"property"},{"path":"\/documentation\/libp2p\/application\/isrunning","title":"var isRunning: Bool","type":"property"},{"path":"\/documentation\/libp2p\/application\/lifecycle-swift.property","title":"var lifecycle: Application.Lifecycle","type":"property"},{"path":"\/documentation\/libp2p\/application\/listenaddresses","title":"var listenAddresses: [Multiaddr]","type":"property"},{"path":"\/documentation\/libp2p\/application\/locks-swift.property","title":"var locks: Application.Locks","type":"property"},{"path":"\/documentation\/libp2p\/application\/logger","title":"var logger: Logger","type":"property"},{"path":"\/documentation\/libp2p\/application\/middleware","title":"var middleware: Middlewares","type":"property"},{"path":"\/documentation\/libp2p\/application\/muxers","title":"var muxers: Application.MuxerUpgraders","type":"property"},{"path":"\/documentation\/libp2p\/application\/peerid","title":"let peerID: PeerID","type":"property"},{"path":"\/documentation\/libp2p\/application\/peers","title":"var peers: PeerStore","type":"property"},{"path":"\/documentation\/libp2p\/application\/peerstore","title":"var peerstore: Application.PeerStores","type":"property"},{"path":"\/documentation\/libp2p\/application\/pubsub","title":"var pubsub: Application.PubSubServices","type":"property"},{"path":"\/documentation\/libp2p\/application\/resolvers-swift.property","title":"var resolvers: Application.Resolvers","type":"property"},{"path":"\/documentation\/libp2p\/application\/responder-swift.property","title":"var responder: Application.Responder","type":"property"},{"path":"\/documentation\/libp2p\/application\/routes","title":"var routes: Routes","type":"property"},{"path":"\/documentation\/libp2p\/application\/running-swift.property","title":"var running: Application.Running?","type":"property"},{"path":"\/documentation\/libp2p\/application\/security","title":"var security: Application.SecurityUpgraders","type":"property"},{"path":"\/documentation\/libp2p\/application\/servers-swift.property","title":"var servers: Application.Servers","type":"property"},{"path":"\/documentation\/libp2p\/application\/storage","title":"var storage: Storage","type":"property"},{"path":"\/documentation\/libp2p\/application\/sync","title":"var sync: Lock","type":"property"},{"path":"\/documentation\/libp2p\/application\/tcp-swift.property","title":"var tcp: Application.TCP","type":"property"},{"path":"\/documentation\/libp2p\/application\/threadpool","title":"var threadPool: NIOThreadPool","type":"property"},{"path":"\/documentation\/libp2p\/application\/topology","title":"var topology: Application.TopologyRegistrations","type":"property"},{"path":"\/documentation\/libp2p\/application\/transportupgraders-swift.property","title":"var transportUpgraders: Application.TransportUpgraders","type":"property"},{"path":"\/documentation\/libp2p\/application\/transports-swift.property","title":"var transports: Application.Transports","type":"property"},{"path":"\/documentation\/libp2p\/application\/upgrader","title":"var upgrader: TransportUpgrader","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/libp2p\/application\/boot()","title":"func boot() throws","type":"method"},{"path":"\/documentation\/libp2p\/application\/broadcast(_:toprotocol:)","title":"func broadcast([UInt8], toProtocol: String) -> EventLoopFuture<[String]>","type":"method"},{"path":"\/documentation\/libp2p\/application\/dialableaddress(_:externaladdressesonly:on:)","title":"func dialableAddress([Multiaddr], externalAddressesOnly: Bool, on: EventLoop) -> EventLoopFuture<[Multiaddr]>","type":"method"},{"path":"\/documentation\/libp2p\/application\/listen(_:)","title":"func listen(Application.Servers.Provider)","type":"method"},{"path":"\/documentation\/libp2p\/application\/newrequest(to:forprotocol:withrequest:style:withhandlers:andmiddleware:withtimeout:)-2vpah","title":"func newRequest(to: Multiaddr, forProtocol: String, withRequest: Data, style: Application.SingleRequest.Style, withHandlers: HandlerConfig, andMiddleware: MiddlewareConfig, withTimeout: TimeAmount) -> EventLoopFuture<Data>","type":"method"},{"path":"\/documentation\/libp2p\/application\/newrequest(to:forprotocol:withrequest:style:withhandlers:andmiddleware:withtimeout:)-3vsh2","title":"func newRequest(to: PeerID, forProtocol: String, withRequest: Data, style: Application.SingleRequest.Style, withHandlers: HandlerConfig, andMiddleware: MiddlewareConfig, withTimeout: TimeAmount) -> EventLoopFuture<Data>","type":"method"},{"path":"\/documentation\/libp2p\/application\/newstream(to:forprotocol:)-3w4vo","title":"func newStream(to: Multiaddr, forProtocol: String) throws","type":"method"},{"path":"\/documentation\/libp2p\/application\/newstream(to:forprotocol:)-xhdx","title":"func newStream(to: PeerID, forProtocol: String) throws","type":"method"},{"path":"\/documentation\/libp2p\/application\/newstream(to:forprotocol:withhandlers:andmiddleware:closure:)-370kf","title":"func newStream(to: PeerID, forProtocol: String, withHandlers: HandlerConfig, andMiddleware: MiddlewareConfig, closure: ((Request) throws -> EventLoopFuture<Response>)) throws","type":"method"},{"path":"\/documentation\/libp2p\/application\/newstream(to:forprotocol:withhandlers:andmiddleware:closure:)-8gepr","title":"func newStream(to: Multiaddr, forProtocol: String, withHandlers: HandlerConfig, andMiddleware: MiddlewareConfig, closure: ((Request) throws -> EventLoopFuture<Response>)) throws","type":"method"},{"path":"\/documentation\/libp2p\/application\/resolve(_:)","title":"func resolve(Multiaddr) -> EventLoopFuture<[Multiaddr]?>","type":"method"},{"path":"\/documentation\/libp2p\/application\/resolve(_:for:)","title":"func resolve(Multiaddr, for: Set<MultiaddrProtocol>) -> EventLoopFuture<Multiaddr?>","type":"method"},{"path":"\/documentation\/libp2p\/application\/run()","title":"func run() throws","type":"method"},{"path":"\/documentation\/libp2p\/application\/shutdown()","title":"func shutdown()","type":"method"},{"path":"\/documentation\/libp2p\/application\/start()","title":"func start() throws","type":"method"},{"path":"\/documentation\/libp2p\/application\/stripinternaladdresses(_:)","title":"func stripInternalAddresses([Multiaddr]) -> [Multiaddr]","type":"method"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/libp2p\/application\/errors\/noknownaddressesforpeer","title":"case noKnownAddressesForPeer","type":"case"},{"path":"\/documentation\/libp2p\/application\/errors\/notransportformultiaddr(_:)","title":"case noTransportForMultiaddr(Multiaddr)","type":"case"},{"path":"\/documentation\/libp2p\/application\/errors\/unknownconnection","title":"case unknownConnection","type":"case"},{"path":"\/documentation\/libp2p\/application\/errors\/unknownpeer","title":"case unknownPeer","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/libp2p\/application\/errors\/localizeddescription","title":"var localizedDescription: String","type":"property"}],"path":"\/documentation\/libp2p\/application\/errors\/error-implementations","title":"Error Implementations","type":"symbol"}],"path":"\/documentation\/libp2p\/application\/errors","title":"Application.Errors","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/libp2p\/application\/eventloopgroupprovider-swift.enum\/createnew","title":"case createNew","type":"case"},{"path":"\/documentation\/libp2p\/application\/eventloopgroupprovider-swift.enum\/shared(_:)","title":"case shared(EventLoopGroup)","type":"case"}],"path":"\/documentation\/libp2p\/application\/eventloopgroupprovider-swift.enum","title":"Application.EventLoopGroupProvider","type":"enum"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/libp2p\/application\/add(_:)","title":"func add(Route)","type":"method"},{"path":"\/documentation\/libp2p\/application\/group(_:configure:)-1jbef","title":"func group(Application.ChildChannelHandlers.Provider..., configure: (RoutesBuilder) throws -> ()) rethrows","type":"method"},{"path":"\/documentation\/libp2p\/application\/group(_:configure:)-25qfe","title":"func group([PathComponent], configure: (RoutesBuilder) throws -> ()) rethrows","type":"method"},{"path":"\/documentation\/libp2p\/application\/group(_:configure:)-4k3vv","title":"func group(PathComponent..., configure: (RoutesBuilder) throws -> ()) rethrows","type":"method"},{"path":"\/documentation\/libp2p\/application\/group(_:configure:)-5m1vt","title":"func group([Application.ChildChannelHandlers.Provider], configure: (RoutesBuilder) throws -> ()) rethrows","type":"method"},{"path":"\/documentation\/libp2p\/application\/group(_:configure:)-6ej37","title":"func group(Middleware..., configure: (RoutesBuilder) throws -> ()) rethrows","type":"method"},{"path":"\/documentation\/libp2p\/application\/group(_:configure:)-8rkn1","title":"func group([Middleware], configure: (RoutesBuilder) throws -> ()) rethrows","type":"method"},{"path":"\/documentation\/libp2p\/application\/group(_:handlers:configure:)","title":"func group([PathComponent], handlers: [Application.ChildChannelHandlers.Provider], configure: (RoutesBuilder) throws -> ()) rethrows","type":"method"},{"path":"\/documentation\/libp2p\/application\/grouped(_:)-4lrlz","title":"func grouped(PathComponent...) -> RoutesBuilder","type":"method"},{"path":"\/documentation\/libp2p\/application\/grouped(_:)-5287f","title":"func grouped([Application.ChildChannelHandlers.Provider]) -> RoutesBuilder","type":"method"},{"path":"\/documentation\/libp2p\/application\/grouped(_:)-5e8l6","title":"func grouped([Middleware]) -> RoutesBuilder","type":"method"},{"path":"\/documentation\/libp2p\/application\/grouped(_:)-6hvso","title":"func grouped([PathComponent]) -> RoutesBuilder","type":"method"},{"path":"\/documentation\/libp2p\/application\/grouped(_:)-7w3ke","title":"func grouped(Application.ChildChannelHandlers.Provider...) -> RoutesBuilder","type":"method"},{"path":"\/documentation\/libp2p\/application\/grouped(_:)-xolv","title":"func grouped(Middleware...) -> RoutesBuilder","type":"method"},{"path":"\/documentation\/libp2p\/application\/grouped(_:handlers:)","title":"func grouped([PathComponent], handlers: [Application.ChildChannelHandlers.Provider]) -> RoutesBuilder","type":"method"},{"path":"\/documentation\/libp2p\/application\/on(_:body:handlers:use:)-4btpm","title":"func on<Response>([PathComponent], body: PayloadStreamStrategy, handlers: [Application.ChildChannelHandlers.Provider], use: (Request) throws -> Response) -> Route","type":"method"},{"path":"\/documentation\/libp2p\/application\/on(_:body:handlers:use:)-58cub","title":"func on<Response>(PathComponent..., body: PayloadStreamStrategy, handlers: [Application.ChildChannelHandlers.Provider], use: (Request) throws -> Response) -> Route","type":"method"},{"path":"\/documentation\/libp2p\/application\/register(collection:)","title":"func register(collection: RouteCollection) throws","type":"method"}],"path":"\/documentation\/libp2p\/application\/routesbuilder-implementations","title":"RoutesBuilder Implementations","type":"symbol"}],"path":"\/documentation\/libp2p\/application","title":"Application","type":"class"},{"children":[{"title":"Structures","type":"groupMarker"},{"path":"\/documentation\/libp2p\/basicconnectionlight\/connectionstatemachine","title":"BasicConnectionLight.ConnectionStateMachine","type":"struct"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/libp2p\/basicconnectionlight\/init(application:channel:direction:remoteaddress:expectedremotepeer:)","title":"init(application: Application, channel: Channel, direction: ConnectionStats.Direction, remoteAddress: Multiaddr, expectedRemotePeer: PeerID?)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/libp2p\/basicconnectionlight\/application","title":"var application: Application","type":"property"},{"path":"\/documentation\/libp2p\/basicconnectionlight\/channel","title":"var channel: Channel","type":"property"},{"path":"\/documentation\/libp2p\/basicconnectionlight\/expectedremotepeer-1gjv2","title":"var expectedRemotePeer: PeerID?","type":"property"},{"path":"\/documentation\/libp2p\/basicconnectionlight\/id","title":"var id: UUID","type":"property"},{"path":"\/documentation\/libp2p\/basicconnectionlight\/inboundmuxedchildchannelinitializer","title":"var inboundMuxedChildChannelInitializer: ((Channel) -> EventLoopFuture<Void>)?","type":"property"},{"path":"\/documentation\/libp2p\/basicconnectionlight\/ismuxed","title":"var isMuxed: Bool","type":"property"},{"path":"\/documentation\/libp2p\/basicconnectionlight\/localaddr","title":"var localAddr: Multiaddr?","type":"property"},{"path":"\/documentation\/libp2p\/basicconnectionlight\/localpeer","title":"var localPeer: PeerID","type":"property"},{"path":"\/documentation\/libp2p\/basicconnectionlight\/logger","title":"var logger: Logger","type":"property"},{"path":"\/documentation\/libp2p\/basicconnectionlight\/muxer","title":"var muxer: Muxer?","type":"property"},{"path":"\/documentation\/libp2p\/basicconnectionlight\/outboundmuxedchildchannelinitializer","title":"var outboundMuxedChildChannelInitializer: ((Channel, String) -> EventLoopFuture<Void>)?","type":"property"},{"path":"\/documentation\/libp2p\/basicconnectionlight\/registry","title":"var registry: [UInt64 : Stream]","type":"property"},{"path":"\/documentation\/libp2p\/basicconnectionlight\/remoteaddr","title":"var remoteAddr: Multiaddr?","type":"property"},{"path":"\/documentation\/libp2p\/basicconnectionlight\/remotepeer","title":"var remotePeer: PeerID?","type":"property"},{"path":"\/documentation\/libp2p\/basicconnectionlight\/state","title":"var state: ConnectionState","type":"property"},{"path":"\/documentation\/libp2p\/basicconnectionlight\/statemachine","title":"var stateMachine: BasicConnectionLight.ConnectionStateMachine","type":"property"},{"path":"\/documentation\/libp2p\/basicconnectionlight\/stats","title":"var stats: ConnectionStats","type":"property"},{"path":"\/documentation\/libp2p\/basicconnectionlight\/status","title":"var status: ConnectionStats.Status","type":"property"},{"path":"\/documentation\/libp2p\/basicconnectionlight\/streams","title":"var streams: [Stream]","type":"property"},{"path":"\/documentation\/libp2p\/basicconnectionlight\/tags","title":"var tags: Any?","type":"property"},{"path":"\/documentation\/libp2p\/basicconnectionlight\/timeline","title":"var timeline: [ConnectionStats.Status : Date]","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/libp2p\/basicconnectionlight\/acceptstream(_:protocol:metadata:)","title":"func acceptStream(Stream, protocol: String, metadata: [String]) -> EventLoopFuture<Bool>","type":"method"},{"path":"\/documentation\/libp2p\/basicconnectionlight\/close()","title":"func close() -> EventLoopFuture<Void>","type":"method"},{"path":"\/documentation\/libp2p\/basicconnectionlight\/hasstream(forprotocol:direction:)","title":"func hasStream(forProtocol: String, direction: ConnectionStats.Direction?) -> Stream?","type":"method"},{"path":"\/documentation\/libp2p\/basicconnectionlight\/inboundmuxedchildchannelinitializer(_:)","title":"func inboundMuxedChildChannelInitializer(Channel) -> EventLoopFuture<Void>","type":"method"},{"path":"\/documentation\/libp2p\/basicconnectionlight\/initializechannel()","title":"func initializeChannel() -> EventLoopFuture<Void>","type":"method"},{"path":"\/documentation\/libp2p\/basicconnectionlight\/newstream(_:)","title":"func newStream([String]) -> EventLoopFuture<Stream>","type":"method"},{"path":"\/documentation\/libp2p\/basicconnectionlight\/newstream(forprotocol:)","title":"func newStream(forProtocol: String)","type":"method"},{"path":"\/documentation\/libp2p\/basicconnectionlight\/newstream(forprotocol:mode:)","title":"func newStream(forProtocol: String, mode: BasicConnectionLight.NewStreamMode)","type":"method"},{"path":"\/documentation\/libp2p\/basicconnectionlight\/newstream(forprotocol:withhandlers:andmiddleware:closure:)","title":"func newStream(forProtocol: String, withHandlers: HandlerConfig, andMiddleware: MiddlewareConfig, closure: ((Request) throws -> EventLoopFuture<Response>))","type":"method"},{"path":"\/documentation\/libp2p\/basicconnectionlight\/newstreamhandlersync(_:)","title":"func newStreamHandlerSync(String) throws -> StreamHandler","type":"method"},{"path":"\/documentation\/libp2p\/basicconnectionlight\/newstreamsync(_:)","title":"func newStreamSync(String) throws -> Stream","type":"method"},{"path":"\/documentation\/libp2p\/basicconnectionlight\/outboundmuxedchildchannelinitializer(_:protocol:)","title":"func outboundMuxedChildChannelInitializer(Channel, protocol: String) -> EventLoopFuture<Void>","type":"method"},{"path":"\/documentation\/libp2p\/basicconnectionlight\/removestream(id:)","title":"func removeStream(id: UInt64) -> EventLoopFuture<Void>","type":"method"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/libp2p\/basicconnectionlight\/errors\/failedtocloseallstreams","title":"case failedToCloseAllStreams","type":"case"},{"path":"\/documentation\/libp2p\/basicconnectionlight\/errors\/invalidprotocolnegotatied","title":"case invalidProtocolNegotatied","type":"case"},{"path":"\/documentation\/libp2p\/basicconnectionlight\/errors\/noresponder","title":"case noResponder","type":"case"},{"path":"\/documentation\/libp2p\/basicconnectionlight\/errors\/nostreamforid(_:)","title":"case noStreamForID(UInt64)","type":"case"},{"path":"\/documentation\/libp2p\/basicconnectionlight\/errors\/notimplementedyet","title":"case notImplementedYet","type":"case"},{"path":"\/documentation\/libp2p\/basicconnectionlight\/errors\/timedout","title":"case timedOut","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/libp2p\/basicconnectionlight\/errors\/localizeddescription","title":"var localizedDescription: String","type":"property"}],"path":"\/documentation\/libp2p\/basicconnectionlight\/errors\/error-implementations","title":"Error Implementations","type":"symbol"}],"path":"\/documentation\/libp2p\/basicconnectionlight\/errors","title":"BasicConnectionLight.Errors","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/libp2p\/basicconnectionlight\/newstreammode\/ifonedoesntalreadyexist","title":"case ifOneDoesntAlreadyExist","type":"case"},{"path":"\/documentation\/libp2p\/basicconnectionlight\/newstreammode\/ifoutbounddoesntalreadyexist","title":"case ifOutboundDoesntAlreadyExist","type":"case"},{"path":"\/documentation\/libp2p\/basicconnectionlight\/newstreammode\/openstream","title":"case openStream","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/libp2p\/basicconnectionlight\/newstreammode\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/libp2p\/basicconnectionlight\/newstreammode\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/libp2p\/basicconnectionlight\/newstreammode","title":"BasicConnectionLight.NewStreamMode","type":"enum"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/libp2p\/basicconnectionlight\/direction","title":"var direction: ConnectionStats.Direction","type":"property"},{"path":"\/documentation\/libp2p\/basicconnectionlight\/expectedremotepeer-4m6da","title":"var expectedRemotePeer: PeerID?","type":"property"},{"path":"\/documentation\/libp2p\/basicconnectionlight\/mode","title":"var mode: Mode","type":"property"}],"path":"\/documentation\/libp2p\/basicconnectionlight\/connection-implementations","title":"Connection Implementations","type":"symbol"}],"path":"\/documentation\/libp2p\/basicconnectionlight","title":"BasicConnectionLight","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/libp2p\/basicmulticodectopology\/init(application:registration:)","title":"init(application: Application, registration: TopologyRegistration)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/libp2p\/basicmulticodectopology\/handlers","title":"let handlers: TopologyHandler","type":"property"},{"path":"\/documentation\/libp2p\/basicmulticodectopology\/max","title":"let max: Int","type":"property"},{"path":"\/documentation\/libp2p\/basicmulticodectopology\/min","title":"let min: Int","type":"property"},{"path":"\/documentation\/libp2p\/basicmulticodectopology\/peers","title":"var peers: [String : PeerID]","type":"property"},{"path":"\/documentation\/libp2p\/basicmulticodectopology\/protocols","title":"var protocols: [SemVerProtocol]","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/libp2p\/basicmulticodectopology\/deinitialize()","title":"func deinitialize()","type":"method"},{"path":"\/documentation\/libp2p\/basicmulticodectopology\/disconnect(peer:)","title":"func disconnect(peer: PeerID) -> EventLoopFuture<Void>?","type":"method"},{"path":"\/documentation\/libp2p\/basicmulticodectopology\/set(id:peer:)","title":"func set(id: String, peer: PeerID) -> EventLoopFuture<Bool>?","type":"method"}],"path":"\/documentation\/libp2p\/basicmulticodectopology","title":"BasicMulticodecTopology","type":"class"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/libp2p\/bootcommand\/signature\/init()","title":"init()","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/libp2p\/bootcommand\/signature\/init(from:)","title":"init(from: inout CommandInput) throws","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/libp2p\/bootcommand\/signature\/outputhelp(help:using:)","title":"func outputHelp(help: String, using: inout CommandContext)","type":"method"}],"path":"\/documentation\/libp2p\/bootcommand\/signature\/commandsignature-implementations","title":"CommandSignature Implementations","type":"symbol"}],"path":"\/documentation\/libp2p\/bootcommand\/signature","title":"BootCommand.Signature","type":"struct"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/libp2p\/bootcommand\/init()","title":"init()","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/libp2p\/bootcommand\/help","title":"var help: String","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/libp2p\/bootcommand\/run(using:signature:)","title":"func run(using: CommandContext, signature: BootCommand.Signature) throws","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/libp2p\/bootcommand\/rendercompletionfunctions(using:shell:)","title":"func renderCompletionFunctions(using: CommandContext, shell: Shell) -> String","type":"method"},{"path":"\/documentation\/libp2p\/bootcommand\/rendercompletionscript(using:shell:)","title":"func renderCompletionScript(using: CommandContext, shell: Shell) -> String","type":"method"},{"path":"\/documentation\/libp2p\/bootcommand\/run(using:)","title":"func run(using: inout CommandContext) throws","type":"method"}],"path":"\/documentation\/libp2p\/bootcommand\/anycommand-implementations","title":"AnyCommand Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/libp2p\/bootcommand\/outputautocomplete(using:)","title":"func outputAutoComplete(using: inout CommandContext)","type":"method"},{"path":"\/documentation\/libp2p\/bootcommand\/outputhelp(using:)","title":"func outputHelp(using: inout CommandContext)","type":"method"}],"path":"\/documentation\/libp2p\/bootcommand\/command-implementations","title":"Command Implementations","type":"symbol"}],"path":"\/documentation\/libp2p\/bootcommand","title":"BootCommand","type":"class"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/libp2p\/bootstrappeerdiscovery\/onpeerdiscovered","title":"var onPeerDiscovered: ((PeerInfo) -> ())?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/libp2p\/bootstrappeerdiscovery\/advertise(service:options:)","title":"func advertise(service: String, options: Options?) -> EventLoopFuture<TimeAmount>","type":"method"},{"path":"\/documentation\/libp2p\/bootstrappeerdiscovery\/findpeers(supportingservice:options:)","title":"func findPeers(supportingService: String, options: Options?) -> EventLoopFuture<DiscoverdPeers>","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/libp2p\/bootstrappeerdiscovery\/ipfsbootnodes","title":"static let IPFSBootNodes: [PeerInfo]","type":"property"},{"path":"\/documentation\/libp2p\/bootstrappeerdiscovery\/key","title":"static let key: String","type":"property"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/libp2p\/bootstrappeerdiscovery\/errors\/notsupported","title":"case notSupported","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/libp2p\/bootstrappeerdiscovery\/errors\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/libp2p\/bootstrappeerdiscovery\/errors\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/libp2p\/bootstrappeerdiscovery\/errors\/localizeddescription","title":"var localizedDescription: String","type":"property"}],"path":"\/documentation\/libp2p\/bootstrappeerdiscovery\/errors\/error-implementations","title":"Error Implementations","type":"symbol"}],"path":"\/documentation\/libp2p\/bootstrappeerdiscovery\/errors","title":"BootstrapPeerDiscovery.Errors","type":"enum"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/libp2p\/bootstrappeerdiscovery\/didboot(_:)","title":"func didBoot(Application) throws","type":"method"},{"path":"\/documentation\/libp2p\/bootstrappeerdiscovery\/shutdown(_:)","title":"func shutdown(Application)","type":"method"},{"path":"\/documentation\/libp2p\/bootstrappeerdiscovery\/willboot(_:)","title":"func willBoot(Application) throws","type":"method"}],"path":"\/documentation\/libp2p\/bootstrappeerdiscovery\/lifecyclehandler-implementations","title":"LifecycleHandler Implementations","type":"symbol"}],"path":"\/documentation\/libp2p\/bootstrappeerdiscovery","title":"BootstrapPeerDiscovery","type":"class"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/libp2p\/eventbus\/on(_:event:)","title":"func on(AnyObject, event: EventBus.EventHandler)","type":"method"},{"path":"\/documentation\/libp2p\/eventbus\/post(_:)","title":"func post(EventBus.EventEmitter)","type":"method"},{"path":"\/documentation\/libp2p\/eventbus\/unregister(_:)","title":"func unregister(AnyObject)","type":"method"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/libp2p\/eventbus\/eventemitter\/closedstream(_:)","title":"case closedStream(Stream)","type":"case"},{"path":"\/documentation\/libp2p\/eventbus\/eventemitter\/connected(_:)","title":"case connected(Connection)","type":"case"},{"path":"\/documentation\/libp2p\/eventbus\/eventemitter\/disconnected(_:_:)","title":"case disconnected(Connection, PeerID?)","type":"case"},{"path":"\/documentation\/libp2p\/eventbus\/eventemitter\/identifiedpeer(_:)","title":"case identifiedPeer(IdentifiedPeer)","type":"case"},{"path":"\/documentation\/libp2p\/eventbus\/eventemitter\/listen(_:_:)","title":"case listen(String, Multiaddr)","type":"case"},{"path":"\/documentation\/libp2p\/eventbus\/eventemitter\/listenclosed(_:_:)","title":"case listenClosed(String, Multiaddr)","type":"case"},{"path":"\/documentation\/libp2p\/eventbus\/eventemitter\/localprotocolchange","title":"case localProtocolChange","type":"case"},{"path":"\/documentation\/libp2p\/eventbus\/eventemitter\/openedstream(_:)","title":"case openedStream(Stream)","type":"case"},{"path":"\/documentation\/libp2p\/eventbus\/eventemitter\/peerdiscovered(_:)","title":"case peerDiscovered(PeerInfo)","type":"case"},{"path":"\/documentation\/libp2p\/eventbus\/eventemitter\/remotepeer(_:)","title":"case remotePeer(PeerInfo)","type":"case"},{"path":"\/documentation\/libp2p\/eventbus\/eventemitter\/remotepeerprotocolchange(_:)","title":"case remotePeerProtocolChange(RemotePeerProtocolChange)","type":"case"},{"path":"\/documentation\/libp2p\/eventbus\/eventemitter\/upgraded(_:)","title":"case upgraded(Connection)","type":"case"}],"path":"\/documentation\/libp2p\/eventbus\/eventemitter","title":"EventBus.EventEmitter","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/libp2p\/eventbus\/eventhandler\/closedstream(_:)","title":"case closedStream((Stream) -> Void)","type":"case"},{"path":"\/documentation\/libp2p\/eventbus\/eventhandler\/connected(_:)","title":"case connected((Connection) -> Void)","type":"case"},{"path":"\/documentation\/libp2p\/eventbus\/eventhandler\/disconnected(_:)","title":"case disconnected((Connection, PeerID?) -> Void)","type":"case"},{"path":"\/documentation\/libp2p\/eventbus\/eventhandler\/identifiedpeer(_:)","title":"case identifiedPeer((IdentifiedPeer) -> Void)","type":"case"},{"path":"\/documentation\/libp2p\/eventbus\/eventhandler\/listen(_:)","title":"case listen((String, Multiaddr) -> Void)","type":"case"},{"path":"\/documentation\/libp2p\/eventbus\/eventhandler\/listenclosed(_:)","title":"case listenClosed((String, Multiaddr) -> Void)","type":"case"},{"path":"\/documentation\/libp2p\/eventbus\/eventhandler\/openedstream(_:)","title":"case openedStream((Stream) -> Void)","type":"case"},{"path":"\/documentation\/libp2p\/eventbus\/eventhandler\/peerdiscovered(_:)","title":"case peerDiscovered((PeerInfo) -> Void)","type":"case"},{"path":"\/documentation\/libp2p\/eventbus\/eventhandler\/remotepeer(_:)","title":"case remotePeer((PeerInfo) -> Void)","type":"case"},{"path":"\/documentation\/libp2p\/eventbus\/eventhandler\/remotepeerprotocolchange(_:)","title":"case remotePeerProtocolChange((RemotePeerProtocolChange) -> Void)","type":"case"},{"path":"\/documentation\/libp2p\/eventbus\/eventhandler\/upgraded(_:)","title":"case upgraded((Connection) -> Void)","type":"case"}],"path":"\/documentation\/libp2p\/eventbus\/eventhandler","title":"EventBus.EventHandler","type":"enum"}],"path":"\/documentation\/libp2p\/eventbus","title":"EventBus","type":"class"},{"children":[{"title":"Structures","type":"groupMarker"},{"path":"\/documentation\/libp2p\/identify\/multicodecs","title":"Identify.Multicodecs","type":"struct"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/libp2p\/identify\/init(application:)","title":"init(application: Application)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/libp2p\/identify\/description","title":"var description: String","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/libp2p\/identify\/ping(addr:)","title":"func ping(addr: Multiaddr) -> EventLoopFuture<TimeAmount>","type":"method"},{"path":"\/documentation\/libp2p\/identify\/ping(peer:)","title":"func ping(peer: PeerID) -> EventLoopFuture<TimeAmount>","type":"method"},{"path":"\/documentation\/libp2p\/identify\/register()","title":"func register()","type":"method"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/libp2p\/identify\/errors\/timedout","title":"case timedOut","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/libp2p\/identify\/errors\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/libp2p\/identify\/errors\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/libp2p\/identify\/errors\/localizeddescription","title":"var localizedDescription: String","type":"property"}],"path":"\/documentation\/libp2p\/identify\/errors\/error-implementations","title":"Error Implementations","type":"symbol"}],"path":"\/documentation\/libp2p\/identify\/errors","title":"Identify.Errors","type":"enum"}],"path":"\/documentation\/libp2p\/identify","title":"Identify","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/libp2p\/inboundloggerhandler\/init()","title":"init()","type":"init"},{"path":"\/documentation\/libp2p\/inboundloggerhandler\/init(mode:)","title":"init(mode: Mode)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/libp2p\/inboundloggerhandler\/channelread(context:data:)","title":"func channelRead(context: ChannelHandlerContext, data: NIOAny)","type":"method"},{"path":"\/documentation\/libp2p\/inboundloggerhandler\/channelreadcomplete(context:)","title":"func channelReadComplete(context: ChannelHandlerContext)","type":"method"},{"path":"\/documentation\/libp2p\/inboundloggerhandler\/errorcaught(context:error:)","title":"func errorCaught(context: ChannelHandlerContext, error: Error)","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/libp2p\/inboundloggerhandler\/inboundin","title":"InboundLoggerHandler.InboundIn","type":"typealias"},{"path":"\/documentation\/libp2p\/inboundloggerhandler\/inboundout","title":"InboundLoggerHandler.InboundOut","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/libp2p\/inboundloggerhandler\/handleradded(context:)","title":"func handlerAdded(context: ChannelHandlerContext)","type":"method"},{"path":"\/documentation\/libp2p\/inboundloggerhandler\/handlerremoved(context:)","title":"func handlerRemoved(context: ChannelHandlerContext)","type":"method"}],"path":"\/documentation\/libp2p\/inboundloggerhandler\/channelhandler-implementations","title":"ChannelHandler Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/libp2p\/inboundloggerhandler\/unwrapinboundin(_:)","title":"func unwrapInboundIn(NIOAny) -> Self.InboundIn","type":"method"},{"path":"\/documentation\/libp2p\/inboundloggerhandler\/wrapinboundout(_:)","title":"func wrapInboundOut(Self.InboundOut) -> NIOAny","type":"method"}],"path":"\/documentation\/libp2p\/inboundloggerhandler\/channelinboundhandler-implementations","title":"ChannelInboundHandler Implementations","type":"symbol"}],"path":"\/documentation\/libp2p\/inboundloggerhandler","title":"InboundLoggerHandler","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/libp2p\/outboundloggerhandler\/init()","title":"init()","type":"init"},{"path":"\/documentation\/libp2p\/outboundloggerhandler\/init(mode:)","title":"init(mode: Mode)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/libp2p\/outboundloggerhandler\/channelwritecomplete(context:)","title":"func channelWriteComplete(context: ChannelHandlerContext)","type":"method"},{"path":"\/documentation\/libp2p\/outboundloggerhandler\/errorcaught(context:error:)","title":"func errorCaught(context: ChannelHandlerContext, error: Error)","type":"method"},{"path":"\/documentation\/libp2p\/outboundloggerhandler\/write(context:data:promise:)","title":"func write(context: ChannelHandlerContext, data: NIOAny, promise: EventLoopPromise<Void>?)","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/libp2p\/outboundloggerhandler\/outboundin","title":"OutboundLoggerHandler.OutboundIn","type":"typealias"},{"path":"\/documentation\/libp2p\/outboundloggerhandler\/outboundout","title":"OutboundLoggerHandler.OutboundOut","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/libp2p\/outboundloggerhandler\/handleradded(context:)","title":"func handlerAdded(context: ChannelHandlerContext)","type":"method"},{"path":"\/documentation\/libp2p\/outboundloggerhandler\/handlerremoved(context:)","title":"func handlerRemoved(context: ChannelHandlerContext)","type":"method"}],"path":"\/documentation\/libp2p\/outboundloggerhandler\/channelhandler-implementations","title":"ChannelHandler Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/libp2p\/outboundloggerhandler\/unwrapoutboundin(_:)","title":"func unwrapOutboundIn(NIOAny) -> Self.OutboundIn","type":"method"}],"path":"\/documentation\/libp2p\/outboundloggerhandler\/channeloutboundhandler-implementations","title":"ChannelOutboundHandler Implementations","type":"symbol"}],"path":"\/documentation\/libp2p\/outboundloggerhandler","title":"OutboundLoggerHandler","type":"class"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/libp2p\/partialidentifymessagedecoder\/decode(context:buffer:)","title":"func decode(context: ChannelHandlerContext, buffer: inout ByteBuffer) throws -> DecodingState","type":"method"},{"path":"\/documentation\/libp2p\/partialidentifymessagedecoder\/decodelast(context:buffer:seeneof:)","title":"func decodeLast(context: ChannelHandlerContext, buffer: inout ByteBuffer, seenEOF: Bool) throws -> DecodingState","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/libp2p\/partialidentifymessagedecoder\/inboundout","title":"PartialIdentifyMessageDecoder.InboundOut","type":"typealias"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/libp2p\/partialidentifymessagedecoder\/errors\/invalididentifymessage","title":"case invalidIdentifyMessage","type":"case"},{"path":"\/documentation\/libp2p\/partialidentifymessagedecoder\/errors\/invalidpartialidentifymessage","title":"case invalidPartialIdentifyMessage","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/libp2p\/partialidentifymessagedecoder\/errors\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/libp2p\/partialidentifymessagedecoder\/errors\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/libp2p\/partialidentifymessagedecoder\/errors\/localizeddescription","title":"var localizedDescription: String","type":"property"}],"path":"\/documentation\/libp2p\/partialidentifymessagedecoder\/errors\/error-implementations","title":"Error Implementations","type":"symbol"}],"path":"\/documentation\/libp2p\/partialidentifymessagedecoder\/errors","title":"PartialIdentifyMessageDecoder.Errors","type":"enum"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/libp2p\/partialidentifymessagedecoder\/decoderadded(context:)","title":"func decoderAdded(context: ChannelHandlerContext)","type":"method"},{"path":"\/documentation\/libp2p\/partialidentifymessagedecoder\/decoderremoved(context:)","title":"func decoderRemoved(context: ChannelHandlerContext)","type":"method"},{"path":"\/documentation\/libp2p\/partialidentifymessagedecoder\/shouldreclaimbytes(buffer:)","title":"func shouldReclaimBytes(buffer: ByteBuffer) -> Bool","type":"method"},{"path":"\/documentation\/libp2p\/partialidentifymessagedecoder\/wrapinboundout(_:)","title":"func wrapInboundOut(Self.InboundOut) -> NIOAny","type":"method"}],"path":"\/documentation\/libp2p\/partialidentifymessagedecoder\/bytetomessagedecoder-implementations","title":"ByteToMessageDecoder Implementations","type":"symbol"}],"path":"\/documentation\/libp2p\/partialidentifymessagedecoder","title":"PartialIdentifyMessageDecoder","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/libp2p\/request\/init(application:protocol:event:streamdirection:connection:channel:collectedbody:logger:on:)","title":"init(application: Application, protocol: String?, event: Request.RequestEvent, streamDirection: ConnectionStats.Direction, connection: Connection, channel: Channel, collectedBody: ByteBuffer?, logger: Logger, on: EventLoop)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/libp2p\/request\/addr","title":"var addr: Multiaddr","type":"property"},{"path":"\/documentation\/libp2p\/request\/allocator","title":"var allocator: ByteBufferAllocator","type":"property"},{"path":"\/documentation\/libp2p\/request\/application","title":"let application: Application","type":"property"},{"path":"\/documentation\/libp2p\/request\/channel","title":"var channel: Channel","type":"property"},{"path":"\/documentation\/libp2p\/request\/connection","title":"var connection: Connection","type":"property"},{"path":"\/documentation\/libp2p\/request\/description","title":"var description: String","type":"property"},{"path":"\/documentation\/libp2p\/request\/detaileddescription","title":"var detailedDescription: String","type":"property"},{"path":"\/documentation\/libp2p\/request\/event","title":"var event: Request.RequestEvent","type":"property"},{"path":"\/documentation\/libp2p\/request\/eventloop","title":"let eventLoop: EventLoop","type":"property"},{"path":"\/documentation\/libp2p\/request\/localpeer","title":"var localPeer: PeerID","type":"property"},{"path":"\/documentation\/libp2p\/request\/logger","title":"var logger: Logger","type":"property"},{"path":"\/documentation\/libp2p\/request\/parameters","title":"var parameters: Parameters","type":"property"},{"path":"\/documentation\/libp2p\/request\/payload","title":"var payload: ByteBuffer","type":"property"},{"path":"\/documentation\/libp2p\/request\/protocol","title":"var `protocol`: String","type":"property"},{"path":"\/documentation\/libp2p\/request\/remoteaddress","title":"var remoteAddress: SocketAddress?","type":"property"},{"path":"\/documentation\/libp2p\/request\/remotepeer","title":"var remotePeer: PeerID?","type":"property"},{"path":"\/documentation\/libp2p\/request\/route","title":"var route: Route?","type":"property"},{"path":"\/documentation\/libp2p\/request\/storage","title":"var storage: Storage","type":"property"},{"path":"\/documentation\/libp2p\/request\/streamdirection","title":"let streamDirection: ConnectionStats.Direction","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/libp2p\/request\/shouldclose()","title":"func shouldClose()","type":"method"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/libp2p\/request\/requestevent\/closed","title":"case closed","type":"case"},{"path":"\/documentation\/libp2p\/request\/requestevent\/data(_:)","title":"case data(ByteBuffer)","type":"case"},{"path":"\/documentation\/libp2p\/request\/requestevent\/error(_:)","title":"case error(Error)","type":"case"},{"path":"\/documentation\/libp2p\/request\/requestevent\/ready","title":"case ready","type":"case"}],"path":"\/documentation\/libp2p\/request\/requestevent","title":"Request.RequestEvent","type":"enum"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/libp2p\/request\/decoderequest(_:)","title":"static func decodeRequest(Request) -> EventLoopFuture<Request>","type":"method"}],"path":"\/documentation\/libp2p\/request\/requestdecodable-implementations","title":"RequestDecodable Implementations","type":"symbol"}],"path":"\/documentation\/libp2p\/request","title":"Request","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/libp2p\/response\/init(payload:)","title":"init(payload: ByteBuffer)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/libp2p\/response\/description","title":"var description: String","type":"property"},{"path":"\/documentation\/libp2p\/response\/payload","title":"var payload: ByteBuffer","type":"property"},{"path":"\/documentation\/libp2p\/response\/storage","title":"var storage: Storage","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/libp2p\/response\/encoderesponse(for:)","title":"func encodeResponse(for: Request) -> EventLoopFuture<Response>","type":"method"}],"path":"\/documentation\/libp2p\/response\/responseencodable-implementations","title":"ResponseEncodable Implementations","type":"symbol"}],"path":"\/documentation\/libp2p\/response","title":"Response","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/libp2p\/route\/init(path:responder:handlers:requesttype:responsetype:)","title":"init(path: [PathComponent], responder: Responder, handlers: [Application.ChildChannelHandlers.Provider], requestType: Any.Type, responseType: Any.Type)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/libp2p\/route\/description","title":"var description: String","type":"property"},{"path":"\/documentation\/libp2p\/route\/handlers","title":"var handlers: [Application.ChildChannelHandlers.Provider]","type":"property"},{"path":"\/documentation\/libp2p\/route\/path","title":"var path: [PathComponent]","type":"property"},{"path":"\/documentation\/libp2p\/route\/requesttype","title":"var requestType: Any.Type","type":"property"},{"path":"\/documentation\/libp2p\/route\/responder","title":"var responder: Responder","type":"property"},{"path":"\/documentation\/libp2p\/route\/responsetype","title":"var responseType: Any.Type","type":"property"},{"path":"\/documentation\/libp2p\/route\/userinfo","title":"var userInfo: [AnyHashable : Any]","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/libp2p\/route\/description(_:)","title":"func description(String) -> Route","type":"method"}],"path":"\/documentation\/libp2p\/route","title":"Route","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/libp2p\/routes\/init()","title":"init()","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/libp2p\/routes\/all","title":"var all: [Route]","type":"property"},{"path":"\/documentation\/libp2p\/routes\/caseinsensitive","title":"var caseInsensitive: Bool","type":"property"},{"path":"\/documentation\/libp2p\/routes\/defaultmaxbodysize","title":"var defaultMaxBodySize: ByteCount","type":"property"},{"path":"\/documentation\/libp2p\/routes\/description","title":"var description: String","type":"property"},{"path":"\/documentation\/libp2p\/routes\/registeredprotocols","title":"var registeredProtocols: [SemVerProtocol]","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/libp2p\/routes\/add(_:)","title":"func add(Route)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/libp2p\/routes\/group(_:configure:)-1or2y","title":"func group(Application.ChildChannelHandlers.Provider..., configure: (RoutesBuilder) throws -> ()) rethrows","type":"method"},{"path":"\/documentation\/libp2p\/routes\/group(_:configure:)-3q2pa","title":"func group(Middleware..., configure: (RoutesBuilder) throws -> ()) rethrows","type":"method"},{"path":"\/documentation\/libp2p\/routes\/group(_:configure:)-5mz5n","title":"func group([Application.ChildChannelHandlers.Provider], configure: (RoutesBuilder) throws -> ()) rethrows","type":"method"},{"path":"\/documentation\/libp2p\/routes\/group(_:configure:)-62lx6","title":"func group([Middleware], configure: (RoutesBuilder) throws -> ()) rethrows","type":"method"},{"path":"\/documentation\/libp2p\/routes\/group(_:configure:)-6clwt","title":"func group(PathComponent..., configure: (RoutesBuilder) throws -> ()) rethrows","type":"method"},{"path":"\/documentation\/libp2p\/routes\/group(_:configure:)-9kk3f","title":"func group([PathComponent], configure: (RoutesBuilder) throws -> ()) rethrows","type":"method"},{"path":"\/documentation\/libp2p\/routes\/group(_:handlers:configure:)","title":"func group([PathComponent], handlers: [Application.ChildChannelHandlers.Provider], configure: (RoutesBuilder) throws -> ()) rethrows","type":"method"},{"path":"\/documentation\/libp2p\/routes\/grouped(_:)-1qbj2","title":"func grouped([PathComponent]) -> RoutesBuilder","type":"method"},{"path":"\/documentation\/libp2p\/routes\/grouped(_:)-6du6o","title":"func grouped(PathComponent...) -> RoutesBuilder","type":"method"},{"path":"\/documentation\/libp2p\/routes\/grouped(_:)-6w9kx","title":"func grouped([Middleware]) -> RoutesBuilder","type":"method"},{"path":"\/documentation\/libp2p\/routes\/grouped(_:)-6wgsk","title":"func grouped(Application.ChildChannelHandlers.Provider...) -> RoutesBuilder","type":"method"},{"path":"\/documentation\/libp2p\/routes\/grouped(_:)-708ox","title":"func grouped(Middleware...) -> RoutesBuilder","type":"method"},{"path":"\/documentation\/libp2p\/routes\/grouped(_:)-9v0pa","title":"func grouped([Application.ChildChannelHandlers.Provider]) -> RoutesBuilder","type":"method"},{"path":"\/documentation\/libp2p\/routes\/grouped(_:handlers:)","title":"func grouped([PathComponent], handlers: [Application.ChildChannelHandlers.Provider]) -> RoutesBuilder","type":"method"},{"path":"\/documentation\/libp2p\/routes\/on(_:body:handlers:use:)-2bn64","title":"func on<Response>([PathComponent], body: PayloadStreamStrategy, handlers: [Application.ChildChannelHandlers.Provider], use: (Request) throws -> Response) -> Route","type":"method"},{"path":"\/documentation\/libp2p\/routes\/on(_:body:handlers:use:)-8j4b6","title":"func on<Response>(PathComponent..., body: PayloadStreamStrategy, handlers: [Application.ChildChannelHandlers.Provider], use: (Request) throws -> Response) -> Route","type":"method"},{"path":"\/documentation\/libp2p\/routes\/register(collection:)","title":"func register(collection: RouteCollection) throws","type":"method"}],"path":"\/documentation\/libp2p\/routes\/routesbuilder-implementations","title":"RoutesBuilder Implementations","type":"symbol"}],"path":"\/documentation\/libp2p\/routes","title":"Routes","type":"class"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/libp2p\/routescommand\/signature\/init()","title":"init()","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/libp2p\/routescommand\/signature\/init(from:)","title":"init(from: inout CommandInput) throws","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/libp2p\/routescommand\/signature\/outputhelp(help:using:)","title":"func outputHelp(help: String, using: inout CommandContext)","type":"method"}],"path":"\/documentation\/libp2p\/routescommand\/signature\/commandsignature-implementations","title":"CommandSignature Implementations","type":"symbol"}],"path":"\/documentation\/libp2p\/routescommand\/signature","title":"RoutesCommand.Signature","type":"struct"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/libp2p\/routescommand\/help","title":"var help: String","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/libp2p\/routescommand\/run(using:signature:)","title":"func run(using: CommandContext, signature: RoutesCommand.Signature) throws","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/libp2p\/routescommand\/rendercompletionfunctions(using:shell:)","title":"func renderCompletionFunctions(using: CommandContext, shell: Shell) -> String","type":"method"},{"path":"\/documentation\/libp2p\/routescommand\/rendercompletionscript(using:shell:)","title":"func renderCompletionScript(using: CommandContext, shell: Shell) -> String","type":"method"},{"path":"\/documentation\/libp2p\/routescommand\/run(using:)","title":"func run(using: inout CommandContext) throws","type":"method"}],"path":"\/documentation\/libp2p\/routescommand\/anycommand-implementations","title":"AnyCommand Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/libp2p\/routescommand\/outputautocomplete(using:)","title":"func outputAutoComplete(using: inout CommandContext)","type":"method"},{"path":"\/documentation\/libp2p\/routescommand\/outputhelp(using:)","title":"func outputHelp(using: inout CommandContext)","type":"method"}],"path":"\/documentation\/libp2p\/routescommand\/command-implementations","title":"Command Implementations","type":"symbol"}],"path":"\/documentation\/libp2p\/routescommand","title":"RoutesCommand","type":"class"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/libp2p\/servecommand\/signature-swift.struct\/init()","title":"init()","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/libp2p\/servecommand\/signature-swift.struct\/init(from:)","title":"init(from: inout CommandInput) throws","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/libp2p\/servecommand\/signature-swift.struct\/outputhelp(help:using:)","title":"func outputHelp(help: String, using: inout CommandContext)","type":"method"}],"path":"\/documentation\/libp2p\/servecommand\/signature-swift.struct\/commandsignature-implementations","title":"CommandSignature Implementations","type":"symbol"}],"path":"\/documentation\/libp2p\/servecommand\/signature-swift.struct","title":"ServeCommand.Signature","type":"struct"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/libp2p\/servecommand\/help","title":"var help: String","type":"property"},{"path":"\/documentation\/libp2p\/servecommand\/signature-swift.property","title":"let signature: ServeCommand.Signature","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/libp2p\/servecommand\/run(using:signature:)","title":"func run(using: CommandContext, signature: ServeCommand.Signature) throws","type":"method"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/libp2p\/servecommand\/error\/incompatibleflags","title":"case incompatibleFlags","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/libp2p\/servecommand\/error\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/libp2p\/servecommand\/error\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/libp2p\/servecommand\/error\/localizeddescription","title":"var localizedDescription: String","type":"property"}],"path":"\/documentation\/libp2p\/servecommand\/error\/error-implementations","title":"Error Implementations","type":"symbol"}],"path":"\/documentation\/libp2p\/servecommand\/error","title":"ServeCommand.Error","type":"enum"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/libp2p\/servecommand\/rendercompletionfunctions(using:shell:)","title":"func renderCompletionFunctions(using: CommandContext, shell: Shell) -> String","type":"method"},{"path":"\/documentation\/libp2p\/servecommand\/rendercompletionscript(using:shell:)","title":"func renderCompletionScript(using: CommandContext, shell: Shell) -> String","type":"method"},{"path":"\/documentation\/libp2p\/servecommand\/run(using:)","title":"func run(using: inout CommandContext) throws","type":"method"}],"path":"\/documentation\/libp2p\/servecommand\/anycommand-implementations","title":"AnyCommand Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/libp2p\/servecommand\/outputautocomplete(using:)","title":"func outputAutoComplete(using: inout CommandContext)","type":"method"},{"path":"\/documentation\/libp2p\/servecommand\/outputhelp(using:)","title":"func outputHelp(using: inout CommandContext)","type":"method"}],"path":"\/documentation\/libp2p\/servecommand\/command-implementations","title":"Command Implementations","type":"symbol"}],"path":"\/documentation\/libp2p\/servecommand","title":"ServeCommand","type":"class"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/libp2p\/tcpserver\/configuration\/init(address:backlog:reuseaddress:tcpnodelay:servername:logger:shutdowntimeout:)","title":"init(address: BindAddress, backlog: Int, reuseAddress: Bool, tcpNoDelay: Bool, serverName: String?, logger: Logger?, shutdownTimeout: TimeAmount)","type":"init"},{"path":"\/documentation\/libp2p\/tcpserver\/configuration\/init(hostname:port:backlog:reuseaddress:tcpnodelay:servername:logger:shutdowntimeout:)","title":"init(hostname: String, port: Int, backlog: Int, reuseAddress: Bool, tcpNoDelay: Bool, serverName: String?, logger: Logger?, shutdownTimeout: TimeAmount)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/libp2p\/tcpserver\/configuration\/address","title":"var address: BindAddress","type":"property"},{"path":"\/documentation\/libp2p\/tcpserver\/configuration\/backlog","title":"var backlog: Int","type":"property"},{"path":"\/documentation\/libp2p\/tcpserver\/configuration\/hostname","title":"var hostname: String","type":"property"},{"path":"\/documentation\/libp2p\/tcpserver\/configuration\/logger","title":"var logger: Logger","type":"property"},{"path":"\/documentation\/libp2p\/tcpserver\/configuration\/port","title":"var port: Int","type":"property"},{"path":"\/documentation\/libp2p\/tcpserver\/configuration\/reuseaddress","title":"var reuseAddress: Bool","type":"property"},{"path":"\/documentation\/libp2p\/tcpserver\/configuration\/servername","title":"var serverName: String?","type":"property"},{"path":"\/documentation\/libp2p\/tcpserver\/configuration\/shutdowntimeout","title":"var shutdownTimeout: TimeAmount","type":"property"},{"path":"\/documentation\/libp2p\/tcpserver\/configuration\/tcpnodelay","title":"var tcpNoDelay: Bool","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/libp2p\/tcpserver\/configuration\/defaulthostname","title":"static let defaultHostname: String","type":"property"},{"path":"\/documentation\/libp2p\/tcpserver\/configuration\/defaultport","title":"static let defaultPort: Int","type":"property"}],"path":"\/documentation\/libp2p\/tcpserver\/configuration","title":"TCPServer.Configuration","type":"struct"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/libp2p\/tcpserver\/listeningaddress","title":"var listeningAddress: Multiaddr","type":"property"},{"path":"\/documentation\/libp2p\/tcpserver\/localaddress","title":"var localAddress: SocketAddress?","type":"property"},{"path":"\/documentation\/libp2p\/tcpserver\/onshutdown","title":"var onShutdown: EventLoopFuture<Void>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/libp2p\/tcpserver\/shutdown()","title":"func shutdown()","type":"method"},{"path":"\/documentation\/libp2p\/tcpserver\/start(address:)","title":"func start(address: BindAddress?) throws","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/libp2p\/tcpserver\/key","title":"static var key: String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/libp2p\/tcpserver\/didboot(_:)","title":"func didBoot(Application) throws","type":"method"},{"path":"\/documentation\/libp2p\/tcpserver\/shutdown(_:)","title":"func shutdown(Application)","type":"method"},{"path":"\/documentation\/libp2p\/tcpserver\/start()","title":"func start() throws","type":"method"},{"path":"\/documentation\/libp2p\/tcpserver\/willboot(_:)","title":"func willBoot(Application) throws","type":"method"}],"path":"\/documentation\/libp2p\/tcpserver\/server-implementations","title":"Server Implementations","type":"symbol"}],"path":"\/documentation\/libp2p\/tcpserver","title":"TCPServer","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/libp2p\/varintframedecoder\/init()","title":"init()","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/libp2p\/varintframedecoder\/decode(context:buffer:)","title":"func decode(context: ChannelHandlerContext, buffer: inout ByteBuffer) throws -> DecodingState","type":"method"},{"path":"\/documentation\/libp2p\/varintframedecoder\/decodelast(context:buffer:seeneof:)","title":"func decodeLast(context: ChannelHandlerContext, buffer: inout ByteBuffer, seenEOF: Bool) throws -> DecodingState","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/libp2p\/varintframedecoder\/inboundout","title":"VarintFrameDecoder.InboundOut","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/libp2p\/varintframedecoder\/decoderadded(context:)","title":"func decoderAdded(context: ChannelHandlerContext)","type":"method"},{"path":"\/documentation\/libp2p\/varintframedecoder\/decoderremoved(context:)","title":"func decoderRemoved(context: ChannelHandlerContext)","type":"method"},{"path":"\/documentation\/libp2p\/varintframedecoder\/shouldreclaimbytes(buffer:)","title":"func shouldReclaimBytes(buffer: ByteBuffer) -> Bool","type":"method"},{"path":"\/documentation\/libp2p\/varintframedecoder\/wrapinboundout(_:)","title":"func wrapInboundOut(Self.InboundOut) -> NIOAny","type":"method"}],"path":"\/documentation\/libp2p\/varintframedecoder\/bytetomessagedecoder-implementations","title":"ByteToMessageDecoder Implementations","type":"symbol"}],"path":"\/documentation\/libp2p\/varintframedecoder","title":"VarintFrameDecoder","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/libp2p\/varintlengthfieldprepender\/init()","title":"init()","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/libp2p\/varintlengthfieldprepender\/frozen","title":"var frozen: Bool","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/libp2p\/varintlengthfieldprepender\/encode(data:out:)","title":"func encode(data: ByteBuffer, out: inout ByteBuffer) throws","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/libp2p\/varintlengthfieldprepender\/outboundin","title":"VarintLengthFieldPrepender.OutboundIn","type":"typealias"}],"path":"\/documentation\/libp2p\/varintlengthfieldprepender","title":"VarintLengthFieldPrepender","type":"class"},{"title":"Protocols","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/libp2p\/addressresolver\/resolve(multiaddr:)","title":"func resolve(multiaddr: Multiaddr) -> EventLoopFuture<[Multiaddr]?>","type":"method"},{"path":"\/documentation\/libp2p\/addressresolver\/resolve(multiaddr:for:)","title":"func resolve(multiaddr: Multiaddr, for: Set<MultiaddrProtocol>) -> EventLoopFuture<Multiaddr?>","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/libp2p\/addressresolver\/key","title":"static var key: String","type":"property"}],"path":"\/documentation\/libp2p\/addressresolver","title":"AddressResolver","type":"protocol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/libp2p\/appconnection\/init(application:channel:direction:remoteaddress:expectedremotepeer:)","title":"init(application: Application, channel: Channel, direction: ConnectionStats.Direction, remoteAddress: Multiaddr, expectedRemotePeer: PeerID?)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/libp2p\/appconnection\/application","title":"var application: Application","type":"property"},{"path":"\/documentation\/libp2p\/appconnection\/logger","title":"var logger: Logger","type":"property"}],"path":"\/documentation\/libp2p\/appconnection","title":"AppConnection","type":"protocol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/libp2p\/client\/eventloop","title":"var eventLoop: EventLoop","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/libp2p\/client\/delegating(to:)","title":"func delegating(to: EventLoop) -> Client","type":"method"},{"children":[{"children":[{"path":"\/documentation\/libp2p\/client\/logging(to:)-6sj14","title":"func logging(to: Logger) -> Client","type":"method"}],"title":"Client Implementations","type":"groupMarker"}],"path":"\/documentation\/libp2p\/client\/logging(to:)-3craz","title":"func logging(to: Logger) -> Client","type":"method"},{"path":"\/documentation\/libp2p\/client\/send(_:)","title":"func send(ClientRequest) -> EventLoopFuture<ClientResponse>","type":"method"},{"path":"\/documentation\/libp2p\/client\/send(to:beforesend:)","title":"func send(to: Multiaddr, beforeSend: (inout ClientRequest) throws -> ()) -> EventLoopFuture<ClientResponse>","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/libp2p\/client\/key","title":"static var key: String","type":"property"}],"path":"\/documentation\/libp2p\/client","title":"Client","type":"protocol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"children":[{"children":[{"path":"\/documentation\/libp2p\/lifecyclehandler\/didboot(_:)-90aeo","title":"func didBoot(Application) throws","type":"method"}],"title":"LifecycleHandler Implementations","type":"groupMarker"},{"children":[{"path":"\/documentation\/libp2p\/server\/didboot(_:)","title":"func didBoot(Application) throws","type":"method"}],"title":"Server Implementations","type":"groupMarker"}],"path":"\/documentation\/libp2p\/lifecyclehandler\/didboot(_:)-41uzq","title":"func didBoot(Application) throws","type":"method"},{"children":[{"children":[{"path":"\/documentation\/libp2p\/lifecyclehandler\/shutdown(_:)-6kq1o","title":"func shutdown(Application)","type":"method"}],"title":"LifecycleHandler Implementations","type":"groupMarker"},{"children":[{"path":"\/documentation\/libp2p\/server\/shutdown(_:)","title":"func shutdown(Application)","type":"method"}],"title":"Server Implementations","type":"groupMarker"}],"path":"\/documentation\/libp2p\/lifecyclehandler\/shutdown(_:)-3zeex","title":"func shutdown(Application)","type":"method"},{"children":[{"children":[{"path":"\/documentation\/libp2p\/lifecyclehandler\/willboot(_:)-6hgxz","title":"func willBoot(Application) throws","type":"method"}],"title":"LifecycleHandler Implementations","type":"groupMarker"},{"children":[{"path":"\/documentation\/libp2p\/server\/willboot(_:)","title":"func willBoot(Application) throws","type":"method"}],"title":"Server Implementations","type":"groupMarker"}],"path":"\/documentation\/libp2p\/lifecyclehandler\/willboot(_:)-6u0a7","title":"func willBoot(Application) throws","type":"method"}],"path":"\/documentation\/libp2p\/lifecyclehandler","title":"LifecycleHandler","type":"protocol"},{"path":"\/documentation\/libp2p\/lockkey","title":"LockKey","type":"protocol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/libp2p\/middleware\/makeresponder(chainingto:)","title":"func makeResponder(chainingTo: Responder) -> Responder","type":"method"},{"path":"\/documentation\/libp2p\/middleware\/respond(to:chainingto:)","title":"func respond(to: Request, chainingTo: Responder) -> EventLoopFuture<Response>","type":"method"}],"path":"\/documentation\/libp2p\/middleware","title":"Middleware","type":"protocol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/libp2p\/muxerupgrader\/printself()","title":"func printSelf()","type":"method"},{"path":"\/documentation\/libp2p\/muxerupgrader\/upgradeconnection(_:muxedpromise:)","title":"func upgradeConnection(Connection, muxedPromise: EventLoopPromise<Muxer>) -> EventLoopFuture<Void>","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/libp2p\/muxerupgrader\/key","title":"static var key: String","type":"property"}],"path":"\/documentation\/libp2p\/muxerupgrader","title":"MuxerUpgrader","type":"protocol"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/libp2p\/requestdecodable\/decoderequest(_:)","title":"static func decodeRequest(Request) -> EventLoopFuture<Self>","type":"method"}],"path":"\/documentation\/libp2p\/requestdecodable","title":"RequestDecodable","type":"protocol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/libp2p\/responder\/pipelineconfig(for:on:)","title":"func pipelineConfig(for: String, on: Connection) -> [ChannelHandler]?","type":"method"},{"path":"\/documentation\/libp2p\/responder\/respond(to:)","title":"func respond(to: Request) -> EventLoopFuture<Response>","type":"method"}],"path":"\/documentation\/libp2p\/responder","title":"Responder","type":"protocol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/libp2p\/responseencodable\/encoderesponse(for:)","title":"func encodeResponse(for: Request) -> EventLoopFuture<Response>","type":"method"}],"path":"\/documentation\/libp2p\/responseencodable","title":"ResponseEncodable","type":"protocol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/libp2p\/routecollection\/boot(routes:)","title":"func boot(routes: RoutesBuilder) throws","type":"method"}],"path":"\/documentation\/libp2p\/routecollection","title":"RouteCollection","type":"protocol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/libp2p\/routesbuilder\/add(_:)","title":"func add(Route)","type":"method"},{"path":"\/documentation\/libp2p\/routesbuilder\/group(_:configure:)-5mm7l","title":"func group(PathComponent..., configure: (RoutesBuilder) throws -> ()) rethrows","type":"method"},{"path":"\/documentation\/libp2p\/routesbuilder\/group(_:configure:)-638ne","title":"func group([Middleware], configure: (RoutesBuilder) throws -> ()) rethrows","type":"method"},{"path":"\/documentation\/libp2p\/routesbuilder\/group(_:configure:)-7jxnl","title":"func group(Application.ChildChannelHandlers.Provider..., configure: (RoutesBuilder) throws -> ()) rethrows","type":"method"},{"path":"\/documentation\/libp2p\/routesbuilder\/group(_:configure:)-8uq1j","title":"func group(Middleware..., configure: (RoutesBuilder) throws -> ()) rethrows","type":"method"},{"path":"\/documentation\/libp2p\/routesbuilder\/group(_:configure:)-gjgg","title":"func group([PathComponent], configure: (RoutesBuilder) throws -> ()) rethrows","type":"method"},{"path":"\/documentation\/libp2p\/routesbuilder\/group(_:configure:)-ptee","title":"func group([Application.ChildChannelHandlers.Provider], configure: (RoutesBuilder) throws -> ()) rethrows","type":"method"},{"path":"\/documentation\/libp2p\/routesbuilder\/group(_:handlers:configure:)-5k6h4","title":"func group([PathComponent], handlers: [Application.ChildChannelHandlers.Provider], configure: (RoutesBuilder) throws -> ()) rethrows","type":"method"},{"path":"\/documentation\/libp2p\/routesbuilder\/group(_:handlers:configure:)-9axrv","title":"func group(PathComponent..., handlers: [Application.ChildChannelHandlers.Provider], configure: (RoutesBuilder) throws -> ()) rethrows","type":"method"},{"path":"\/documentation\/libp2p\/routesbuilder\/grouped(_:)-296g0","title":"func grouped([Middleware]) -> RoutesBuilder","type":"method"},{"path":"\/documentation\/libp2p\/routesbuilder\/grouped(_:)-41g6w","title":"func grouped(Middleware...) -> RoutesBuilder","type":"method"},{"path":"\/documentation\/libp2p\/routesbuilder\/grouped(_:)-4w1w1","title":"func grouped(PathComponent...) -> RoutesBuilder","type":"method"},{"path":"\/documentation\/libp2p\/routesbuilder\/grouped(_:)-6i628","title":"func grouped([Application.ChildChannelHandlers.Provider]) -> RoutesBuilder","type":"method"},{"path":"\/documentation\/libp2p\/routesbuilder\/grouped(_:)-6z17q","title":"func grouped(Application.ChildChannelHandlers.Provider...) -> RoutesBuilder","type":"method"},{"path":"\/documentation\/libp2p\/routesbuilder\/grouped(_:)-9pb38","title":"func grouped([PathComponent]) -> RoutesBuilder","type":"method"},{"path":"\/documentation\/libp2p\/routesbuilder\/grouped(_:handlers:)","title":"func grouped([PathComponent], handlers: [Application.ChildChannelHandlers.Provider]) -> RoutesBuilder","type":"method"},{"path":"\/documentation\/libp2p\/routesbuilder\/on(_:body:handlers:use:)-3vmsi","title":"func on<Response>([PathComponent], body: PayloadStreamStrategy, handlers: [Application.ChildChannelHandlers.Provider], use: (Request) throws -> Response) -> Route","type":"method"},{"path":"\/documentation\/libp2p\/routesbuilder\/on(_:body:handlers:use:)-50iwe","title":"func on<Response>(PathComponent..., body: PayloadStreamStrategy, handlers: [Application.ChildChannelHandlers.Provider], use: (Request) throws -> Response) -> Route","type":"method"},{"path":"\/documentation\/libp2p\/routesbuilder\/register(collection:)","title":"func register(collection: RouteCollection) throws","type":"method"}],"path":"\/documentation\/libp2p\/routesbuilder","title":"RoutesBuilder","type":"protocol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/libp2p\/securityupgrader\/printself()","title":"func printSelf()","type":"method"},{"path":"\/documentation\/libp2p\/securityupgrader\/upgradeconnection(_:position:securedpromise:)","title":"func upgradeConnection(Connection, position: ChannelPipeline.Position, securedPromise: EventLoopPromise<(securityCodec: String, remotePeer: PeerID?, warning: SecurityWarnings?)>) -> EventLoopFuture<Void>","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/libp2p\/securityupgrader\/key","title":"static var key: String","type":"property"}],"path":"\/documentation\/libp2p\/securityupgrader","title":"SecurityUpgrader","type":"protocol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/libp2p\/server\/listeningaddress","title":"var listeningAddress: Multiaddr","type":"property"},{"path":"\/documentation\/libp2p\/server\/onshutdown","title":"var onShutdown: EventLoopFuture<Void>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/libp2p\/server\/shutdown()","title":"func shutdown()","type":"method"},{"path":"\/documentation\/libp2p\/server\/start()","title":"func start() throws","type":"method"},{"path":"\/documentation\/libp2p\/server\/start(address:)","title":"func start(address: BindAddress?) throws","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/libp2p\/server\/key","title":"static var key: String","type":"property"}],"path":"\/documentation\/libp2p\/server","title":"Server","type":"protocol"},{"children":[{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/libp2p\/storagekey\/value","title":"Value","type":"associatedtype"}],"path":"\/documentation\/libp2p\/storagekey","title":"StorageKey","type":"protocol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/libp2p\/transportupgrader\/installhandlers(on:)","title":"func installHandlers(on: Channel)","type":"method"},{"path":"\/documentation\/libp2p\/transportupgrader\/negotiate(protocols:mode:logger:promise:)","title":"func negotiate(protocols: [String], mode: Mode, logger: Logger, promise: EventLoopPromise<(protocol: String, leftoverBytes: ByteBuffer?)>) -> [ChannelHandler]","type":"method"},{"path":"\/documentation\/libp2p\/transportupgrader\/printself()","title":"func printSelf()","type":"method"}],"path":"\/documentation\/libp2p\/transportupgrader","title":"TransportUpgrader","type":"protocol"},{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/libp2p\/basicresponder\/init(closure:handlers:)","title":"init(closure: (Request) throws -> EventLoopFuture<Response>, handlers: [ChannelHandler])","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/libp2p\/basicresponder\/pipelineconfig(for:on:)","title":"func pipelineConfig(for: String, on: Connection) -> [ChannelHandler]?","type":"method"},{"path":"\/documentation\/libp2p\/basicresponder\/respond(to:)","title":"func respond(to: Request) -> EventLoopFuture<Response>","type":"method"}],"path":"\/documentation\/libp2p\/basicresponder","title":"BasicResponder","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/libp2p\/bytecount\/init(value:)","title":"init(value: Int)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/libp2p\/bytecount\/value","title":"let value: Int","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/libp2p\/bytecount\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/libp2p\/bytecount\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/libp2p\/bytecount\/init(extendedgraphemeclusterliteral:)","title":"init(extendedGraphemeClusterLiteral: Self.StringLiteralType)","type":"init"}],"path":"\/documentation\/libp2p\/bytecount\/expressiblebyextendedgraphemeclusterliteral-implementations","title":"ExpressibleByExtendedGraphemeClusterLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/libp2p\/bytecount\/init(integerliteral:)","title":"init(integerLiteral: Int)","type":"init"}],"path":"\/documentation\/libp2p\/bytecount\/expressiblebyintegerliteral-implementations","title":"ExpressibleByIntegerLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/libp2p\/bytecount\/init(stringliteral:)","title":"init(stringLiteral: String)","type":"init"}],"path":"\/documentation\/libp2p\/bytecount\/expressiblebystringliteral-implementations","title":"ExpressibleByStringLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/libp2p\/bytecount\/init(unicodescalarliteral:)","title":"init(unicodeScalarLiteral: Self.ExtendedGraphemeClusterLiteralType)","type":"init"}],"path":"\/documentation\/libp2p\/bytecount\/expressiblebyunicodescalarliteral-implementations","title":"ExpressibleByUnicodeScalarLiteral Implementations","type":"symbol"}],"path":"\/documentation\/libp2p\/bytecount","title":"ByteCount","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/libp2p\/clientrequest\/init(addr:protocol:payload:)","title":"init(addr: Multiaddr, protocol: String, payload: ByteBuffer?)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/libp2p\/clientrequest\/addr","title":"var addr: Multiaddr","type":"property"},{"path":"\/documentation\/libp2p\/clientrequest\/payload","title":"var payload: ByteBuffer?","type":"property"},{"path":"\/documentation\/libp2p\/clientrequest\/protocol","title":"var `protocol`: String","type":"property"}],"path":"\/documentation\/libp2p\/clientrequest","title":"ClientRequest","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/libp2p\/clientresponse\/init(payload:)","title":"init(payload: ByteBuffer?)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/libp2p\/clientresponse\/payload","title":"var payload: ByteBuffer?","type":"property"}],"path":"\/documentation\/libp2p\/clientresponse","title":"ClientResponse","type":"struct"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/libp2p\/dotenvfile\/line\/description","title":"var description: String","type":"property"},{"path":"\/documentation\/libp2p\/dotenvfile\/line\/key","title":"let key: String","type":"property"},{"path":"\/documentation\/libp2p\/dotenvfile\/line\/value","title":"let value: String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/libp2p\/dotenvfile\/line\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/libp2p\/dotenvfile\/line\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/libp2p\/dotenvfile\/line","title":"DotEnvFile.Line","type":"struct"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/libp2p\/dotenvfile\/lines","title":"let lines: [DotEnvFile.Line]","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/libp2p\/dotenvfile\/load(overwrite:)","title":"func load(overwrite: Bool)","type":"method"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/libp2p\/dotenvfile\/load(for:on:fileio:logger:)","title":"static func load(for: Environment, on: Application.EventLoopGroupProvider, fileio: NonBlockingFileIO, logger: Logger)","type":"method"},{"path":"\/documentation\/libp2p\/dotenvfile\/load(path:fileio:on:overwrite:)","title":"static func load(path: String, fileio: NonBlockingFileIO, on: EventLoop, overwrite: Bool) -> EventLoopFuture<Void>","type":"method"},{"path":"\/documentation\/libp2p\/dotenvfile\/load(path:on:fileio:logger:)","title":"static func load(path: String, on: Application.EventLoopGroupProvider, fileio: NonBlockingFileIO, logger: Logger)","type":"method"},{"path":"\/documentation\/libp2p\/dotenvfile\/read(path:fileio:on:)","title":"static func read(path: String, fileio: NonBlockingFileIO, on: EventLoop) -> EventLoopFuture<DotEnvFile>","type":"method"}],"path":"\/documentation\/libp2p\/dotenvfile","title":"DotEnvFile","type":"struct"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/libp2p\/environment\/process-swift.struct\/subscript(dynamicmember:)-1gxwc","title":"subscript(dynamicMember _: String) -> String?","type":"subscript"},{"path":"\/documentation\/libp2p\/environment\/process-swift.struct\/subscript(dynamicmember:)-5j7g9","title":"subscript<T>(dynamicMember _: String) -> T?","type":"subscript"}],"path":"\/documentation\/libp2p\/environment\/process-swift.struct","title":"Environment.Process","type":"struct"},{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/libp2p\/environment\/==(_:_:)","title":"static func == (Environment, Environment) -> Bool","type":"op"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/libp2p\/environment\/init(name:arguments:)","title":"init(name: String, arguments: [String])","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/libp2p\/environment\/arguments","title":"var arguments: [String]","type":"property"},{"path":"\/documentation\/libp2p\/environment\/commandinput","title":"var commandInput: CommandInput","type":"property"},{"path":"\/documentation\/libp2p\/environment\/isrelease","title":"var isRelease: Bool","type":"property"},{"path":"\/documentation\/libp2p\/environment\/name","title":"let name: String","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/libp2p\/environment\/development","title":"static var development: Environment","type":"property"},{"path":"\/documentation\/libp2p\/environment\/process-swift.type.property","title":"static var process: Environment.Process","type":"property"},{"path":"\/documentation\/libp2p\/environment\/production","title":"static var production: Environment","type":"property"},{"path":"\/documentation\/libp2p\/environment\/testing","title":"static var testing: Environment","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/libp2p\/environment\/custom(name:)","title":"static func custom(name: String) -> Environment","type":"method"},{"path":"\/documentation\/libp2p\/environment\/detect(arguments:)","title":"static func detect(arguments: [String]) throws -> Environment","type":"method"},{"path":"\/documentation\/libp2p\/environment\/detect(from:)","title":"static func detect(from: inout CommandInput) throws -> Environment","type":"method"},{"path":"\/documentation\/libp2p\/environment\/get(_:)","title":"static func get(String) -> String?","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/libp2p\/environment\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/libp2p\/environment\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/libp2p\/environment","title":"Environment","type":"struct"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/libp2p\/eventlooptcpclient\/eventloop","title":"let eventLoop: EventLoop","type":"property"},{"path":"\/documentation\/libp2p\/eventlooptcpclient\/tcp","title":"let tcp: TCPClient","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/libp2p\/eventlooptcpclient\/delegating(to:)","title":"func delegating(to: EventLoop) -> Client","type":"method"},{"path":"\/documentation\/libp2p\/eventlooptcpclient\/logging(to:)","title":"func logging(to: Logger) -> Client","type":"method"},{"path":"\/documentation\/libp2p\/eventlooptcpclient\/send(_:)","title":"func send(ClientRequest) -> EventLoopFuture<ClientResponse>","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/libp2p\/eventlooptcpclient\/key","title":"static let key: String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/libp2p\/eventlooptcpclient\/send(to:beforesend:)","title":"func send(to: Multiaddr, beforeSend: (inout ClientRequest) throws -> ()) -> EventLoopFuture<ClientResponse>","type":"method"}],"path":"\/documentation\/libp2p\/eventlooptcpclient\/client-implementations","title":"Client Implementations","type":"symbol"}],"path":"\/documentation\/libp2p\/eventlooptcpclient","title":"EventLoopTCPClient","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/libp2p\/identifiedpeer\/init(peer:identity:)","title":"init(peer: PeerID, identity: [UInt8])","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/libp2p\/identifiedpeer\/identity","title":"let identity: [UInt8]","type":"property"},{"path":"\/documentation\/libp2p\/identifiedpeer\/peer","title":"let peer: PeerID","type":"property"}],"path":"\/documentation\/libp2p\/identifiedpeer","title":"IdentifiedPeer","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/libp2p\/middlewares\/init()","title":"init()","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/libp2p\/middlewares\/resolve()","title":"func resolve() -> [Middleware]","type":"method"},{"path":"\/documentation\/libp2p\/middlewares\/use(_:at:)","title":"func use(Middleware, at: Middlewares.Position)","type":"method"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/libp2p\/middlewares\/position\/beginning","title":"case beginning","type":"case"},{"path":"\/documentation\/libp2p\/middlewares\/position\/end","title":"case end","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/libp2p\/middlewares\/position\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/libp2p\/middlewares\/position\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/libp2p\/middlewares\/position","title":"Middlewares.Position","type":"enum"}],"path":"\/documentation\/libp2p\/middlewares","title":"Middlewares","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/libp2p\/remotepeerprotocolchange\/init(peer:protocols:connection:)","title":"init(peer: PeerID, protocols: [SemVerProtocol], connection: Connection)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/libp2p\/remotepeerprotocolchange\/connection","title":"let connection: Connection","type":"property"},{"path":"\/documentation\/libp2p\/remotepeerprotocolchange\/peer","title":"let peer: PeerID","type":"property"},{"path":"\/documentation\/libp2p\/remotepeerprotocolchange\/protocols","title":"let protocols: [SemVerProtocol]","type":"property"}],"path":"\/documentation\/libp2p\/remotepeerprotocolchange","title":"RemotePeerProtocolChange","type":"struct"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/libp2p\/stacktrace\/frame\/file","title":"var file: String","type":"property"},{"path":"\/documentation\/libp2p\/stacktrace\/frame\/function","title":"var function: String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/libp2p\/stacktrace\/frame\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/libp2p\/stacktrace\/frame\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"}],"path":"\/documentation\/libp2p\/stacktrace\/frame","title":"StackTrace.Frame","type":"struct"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/libp2p\/stacktrace\/frames","title":"var frames: [StackTrace.Frame]","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/libp2p\/stacktrace\/description(max:)","title":"func description(max: Int) -> String","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/libp2p\/stacktrace\/iscaptureenabled","title":"static var isCaptureEnabled: Bool","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/libp2p\/stacktrace\/capture(skip:)","title":"static func capture(skip: Int) -> StackTrace?","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/libp2p\/stacktrace\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/libp2p\/stacktrace\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"}],"path":"\/documentation\/libp2p\/stacktrace","title":"StackTrace","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/libp2p\/storage\/init(logger:)","title":"init(logger: Logger)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/libp2p\/storage\/clear()","title":"func clear()","type":"method"},{"path":"\/documentation\/libp2p\/storage\/contains(_:)","title":"func contains<Key>(Key.Type) -> Bool","type":"method"},{"path":"\/documentation\/libp2p\/storage\/get(_:)","title":"func get<Key>(Key.Type) -> Key.Value?","type":"method"},{"path":"\/documentation\/libp2p\/storage\/set(_:to:onshutdown:)","title":"func set<Key>(Key.Type, to: Key.Value?, onShutdown: ((Key.Value) throws -> ())?)","type":"method"},{"path":"\/documentation\/libp2p\/storage\/shutdown()","title":"func shutdown()","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/libp2p\/storage\/subscript(_:)","title":"subscript<Key>(Key.Type) -> Key.Value?","type":"subscript"}],"path":"\/documentation\/libp2p\/storage","title":"Storage","type":"struct"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/libp2p\/tcp\/protocols","title":"var protocols: [LibP2PProtocol]","type":"property"},{"path":"\/documentation\/libp2p\/tcp\/proxy","title":"var proxy: Bool","type":"property"},{"path":"\/documentation\/libp2p\/tcp\/sharedclient","title":"var sharedClient: ClientBootstrap","type":"property"},{"path":"\/documentation\/libp2p\/tcp\/uuid","title":"let uuid: UUID","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/libp2p\/tcp\/candial(address:)","title":"func canDial(address: Multiaddr) -> Bool","type":"method"},{"path":"\/documentation\/libp2p\/tcp\/dial(address:)","title":"func dial(address: Multiaddr) -> EventLoopFuture<Connection>","type":"method"},{"path":"\/documentation\/libp2p\/tcp\/listen(address:)","title":"func listen(address: Multiaddr) -> EventLoopFuture<Listener>","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/libp2p\/tcp\/key","title":"static var key: String","type":"property"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/libp2p\/tcp\/errors\/invalidmultiaddr","title":"case invalidMultiaddr","type":"case"},{"path":"\/documentation\/libp2p\/tcp\/errors\/notyetimplemeted","title":"case notYetImplemeted","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/libp2p\/tcp\/errors\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/libp2p\/tcp\/errors\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/libp2p\/tcp\/errors\/localizeddescription","title":"var localizedDescription: String","type":"property"}],"path":"\/documentation\/libp2p\/tcp\/errors\/error-implementations","title":"Error Implementations","type":"symbol"}],"path":"\/documentation\/libp2p\/tcp\/errors","title":"TCP.Errors","type":"enum"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/libp2p\/tcp\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/libp2p\/tcp\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"}],"path":"\/documentation\/libp2p\/tcp","title":"TCP","type":"struct"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/libp2p\/tcpclient\/configuration\/init(example:)","title":"init(example: String)","type":"init"}],"path":"\/documentation\/libp2p\/tcpclient\/configuration","title":"TCPClient.Configuration","type":"struct"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/libp2p\/tcpclient\/eventloop","title":"let eventLoop: EventLoop","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/libp2p\/tcpclient\/delegating(to:)","title":"func delegating(to: EventLoop) -> Client","type":"method"},{"path":"\/documentation\/libp2p\/tcpclient\/execute(request:eventloop:logger:)","title":"func execute(request: ClientRequest, eventLoop: EventLoop, logger: Logger?) -> EventLoopFuture<ClientResponse>","type":"method"},{"path":"\/documentation\/libp2p\/tcpclient\/send(_:)","title":"func send(ClientRequest) -> EventLoopFuture<ClientResponse>","type":"method"},{"path":"\/documentation\/libp2p\/tcpclient\/syncshutdown()","title":"func syncShutdown() throws","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/libp2p\/tcpclient\/key","title":"static var key: String","type":"property"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/libp2p\/tcpclient\/errors\/invalidmultiaddrfortransport","title":"case invalidMultiaddrForTransport","type":"case"},{"path":"\/documentation\/libp2p\/tcpclient\/errors\/notimplementedyet","title":"case notImplementedYet","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/libp2p\/tcpclient\/errors\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/libp2p\/tcpclient\/errors\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/libp2p\/tcpclient\/errors\/localizeddescription","title":"var localizedDescription: String","type":"property"}],"path":"\/documentation\/libp2p\/tcpclient\/errors\/error-implementations","title":"Error Implementations","type":"symbol"}],"path":"\/documentation\/libp2p\/tcpclient\/errors","title":"TCPClient.Errors","type":"enum"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/libp2p\/tcpclient\/logging(to:)","title":"func logging(to: Logger) -> Client","type":"method"},{"path":"\/documentation\/libp2p\/tcpclient\/send(to:beforesend:)","title":"func send(to: Multiaddr, beforeSend: (inout ClientRequest) throws -> ()) -> EventLoopFuture<ClientResponse>","type":"method"}],"path":"\/documentation\/libp2p\/tcpclient\/client-implementations","title":"Client Implementations","type":"symbol"}],"path":"\/documentation\/libp2p\/tcpclient","title":"TCPClient","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/libp2p\/topologyregistration\/init(protocol:min:max:handler:)","title":"init(protocol: String, min: Int, max: Int, handler: TopologyHandler)","type":"init"},{"path":"\/documentation\/libp2p\/topologyregistration\/init(protocols:min:max:handler:)","title":"init(protocols: SemVerProtocol, min: Int, max: Int, handler: TopologyHandler)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/libp2p\/topologyregistration\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/libp2p\/topologyregistration","title":"TopologyRegistration","type":"struct"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/libp2p\/bindaddress\/hostname(_:port:)","title":"case hostname(String?, port: Int?)","type":"case"},{"path":"\/documentation\/libp2p\/bindaddress\/unixdomainsocket(path:)","title":"case unixDomainSocket(path: String)","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/libp2p\/bindaddress\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/libp2p\/bindaddress\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/libp2p\/bindaddress","title":"BindAddress","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/libp2p\/handlerconfig\/handlers(_:)","title":"case handlers([Application.ChildChannelHandlers.Provider])","type":"case"},{"path":"\/documentation\/libp2p\/handlerconfig\/inherit","title":"case inherit","type":"case"},{"path":"\/documentation\/libp2p\/handlerconfig\/rawhandlers(_:)","title":"case rawHandlers([ChannelHandler])","type":"case"}],"path":"\/documentation\/libp2p\/handlerconfig","title":"HandlerConfig","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/libp2p\/middlewareconfig\/custom(_:)","title":"case custom(Middleware?)","type":"case"},{"path":"\/documentation\/libp2p\/middlewareconfig\/inherit","title":"case inherit","type":"case"}],"path":"\/documentation\/libp2p\/middlewareconfig","title":"MiddlewareConfig","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/libp2p\/payloadstreamstrategy\/stream","title":"case stream","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/libp2p\/payloadstreamstrategy\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/libp2p\/payloadstreamstrategy\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/libp2p\/payloadstreamstrategy","title":"PayloadStreamStrategy","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/libp2p\/responsetype\/close","title":"case close","type":"case"},{"path":"\/documentation\/libp2p\/responsetype\/reset(_:)","title":"case reset(Error)","type":"case"},{"path":"\/documentation\/libp2p\/responsetype\/respond(_:)","title":"case respond(T)","type":"case"},{"path":"\/documentation\/libp2p\/responsetype\/respondthenclose(_:)","title":"case respondThenClose(T)","type":"case"},{"path":"\/documentation\/libp2p\/responsetype\/stayopen","title":"case stayOpen","type":"case"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/libp2p\/responsetype\/encoderesponse(for:)","title":"func encodeResponse(for: Request) -> EventLoopFuture<Response>","type":"method"}],"path":"\/documentation\/libp2p\/responsetype","title":"ResponseType","type":"enum"}],"path":"\/documentation\/libp2p","title":"LibP2P","type":"module"}]},"schemaVersion":{"major":0,"minor":1,"patch":0}}