{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ChildChannelHandlers"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"content","content":[{"anchor":"overview","level":2,"type":"heading","text":"Overview"},{"type":"codeListing","syntax":null,"code":["\/\/ Extend ChildChannelHandlers.Providers with your static provider","extension Application.ChildChannelHandlers.Provider {","    public static var myChildChannelHandler: Self {","         \/\/ Your provider will be passed the current `Connection`s context which you can use in your handlers instantiation","        .init { connection -> [ChannelHandler] in","            [MyInboundHandler(mode: connection.mode), MyOutboundHandler(mode: connection.mode)]","        }","    }","}","","\/\/ Then use it in your route config...","app.on(\"myRoute\", handlers: [.myChildChannelHandler]) { req in","    \/\/ All requests will pass through the myChildChannelHandler before triggering this responder closure","    \/\/","    \/\/                ⎡ ▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔ ChildChannelPipeline Configured for (\/myRoute\/) ▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔ ⎤","    \/\/             -> | -> [myChildChannelHandler (inbound if exists)]  -> [request encoder]  -> ⎡  Responder  ⎤ |","    \/\/ [Muxer] <->    |                                                                          |   Closure   | |","    \/\/             <- | <- [myChildChannelHandler (outbound if exists)] <- [response decoder] <- ⎣   Handler   ⎦ |","    \/\/                ⎣ ________________________________________________________________________________________ ⎦","    ...","}",""]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/libp2p\/application\/childchannelhandlers"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/LibP2P\/documentation\/LibP2P\/Application\/ChildChannelHandlers","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Define ChildChannelHandler Providers"}],"kind":"symbol","metadata":{"navigatorTitle":[{"kind":"identifier","text":"ChildChannelHandlers"}],"role":"symbol","title":"Application.ChildChannelHandlers","roleHeading":"Structure","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ChildChannelHandlers"}],"symbolKind":"struct","externalID":"s:6LibP2P11ApplicationC20ChildChannelHandlersV","extendedModule":"LibP2P","modules":[{"name":"LibP2P"}]},"hierarchy":{"paths":[["doc:\/\/LibP2P\/documentation\/LibP2P","doc:\/\/LibP2P\/documentation\/LibP2P\/Application"]]},"topicSections":[{"title":"Structures","identifiers":["doc:\/\/LibP2P\/documentation\/LibP2P\/Application\/ChildChannelHandlers\/Provider"]}],"references":{"doc://LibP2P/documentation/LibP2P/Application/ChildChannelHandlers":{"role":"symbol","title":"Application.ChildChannelHandlers","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ChildChannelHandlers"}],"abstract":[{"type":"text","text":"Define ChildChannelHandler Providers"}],"identifier":"doc:\/\/LibP2P\/documentation\/LibP2P\/Application\/ChildChannelHandlers","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ChildChannelHandlers"}],"url":"\/documentation\/libp2p\/application\/childchannelhandlers"},"doc://LibP2P/documentation/LibP2P/Application/ChildChannelHandlers/Provider":{"role":"symbol","title":"Application.ChildChannelHandlers.Provider","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Provider"}],"abstract":[],"identifier":"doc:\/\/LibP2P\/documentation\/LibP2P\/Application\/ChildChannelHandlers\/Provider","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Provider"}],"url":"\/documentation\/libp2p\/application\/childchannelhandlers\/provider"},"doc://LibP2P/documentation/LibP2P":{"role":"collection","title":"LibP2P","abstract":[{"type":"text","text":"A Swift implementation of the modular networking stack "},{"type":"reference","isActive":true,"identifier":"https:\/\/libp2p.io"}],"identifier":"doc:\/\/LibP2P\/documentation\/LibP2P","kind":"symbol","type":"topic","url":"\/documentation\/libp2p"},"doc://LibP2P/documentation/LibP2P/Application":{"role":"symbol","title":"Application","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Application"}],"abstract":[{"type":"text","text":"Core type representing a Libp2p application."},{"type":"text","text":" "},{"type":"text","text":"Storage \/ Lifecycle Abstraction Idea"}],"identifier":"doc:\/\/LibP2P\/documentation\/LibP2P\/Application","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Application"}],"url":"\/documentation\/libp2p\/application"},"https://libp2p.io":{"title":"libp2p","titleInlineContent":[{"type":"text","text":"libp2p"}],"type":"link","identifier":"https:\/\/libp2p.io","url":"https:\/\/libp2p.io"}}}