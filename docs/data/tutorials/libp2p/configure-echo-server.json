{"variants":[{"paths":["\/tutorials\/libp2p\/configure-echo-server"],"traits":[{"interfaceLanguage":"swift"}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[{"kind":"hero","title":"Configuring an Echo Server","chapter":"Configuring a swift-libp2p app","estimatedTimeInMinutes":10,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"In this tutorial we’re going to configure our swift-libp2p node to act as an Echo server. We’ll explore the project layout, server configuration and route handlers."}]}]},{"kind":"tasks","tasks":[{"anchor":"Import-the-standard-LibP2P-Packages","title":"Import the standard LibP2P Packages","contentSection":[{"kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Let’s edit the Package.swift file to include the LibP2P package"}]}],"mediaPosition":"trailing"}],"stepsSection":[{"code":"package5.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add the swift-libp2p project to your app’s dependencies."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"package6.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"We want all of our network communication to be private and secure, so we need a Security module. Let’s use the Noise module."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"package7.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"We also want to be able to open multiple streams over a single connection, so we need to include a Muxer. Don’t worry if that doesn’t make any sense. We’ll cover it more later."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null}]},{"anchor":"Configure-your-LibP2P-Node","title":"Configure your LibP2P Node","contentSection":[{"kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Now that we have the libp2p packages installed lets head over to configure.swift and start configuring our libp2p node."}]}],"mediaPosition":"trailing"}],"stepsSection":[{"code":"configure1.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Click on the configure.swift file in the file browser on the left hand side of XCode. And import LibP2P."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"configure2.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Let’s adjust the applications log level to "},{"type":"codeVoice","code":".notice"},{"type":"text","text":" so we only see relevant info."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"configure3.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Next lets tell LibP2P to start a TCP server on the localhost (ip: 127.0.0.1) and port 10000."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"configure4.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Remeber earlier when we were talking about private \/ secure communication. Let’s import the LibP2PNoise module and tell libp2p to use it. Now everytime libp2p connects to another computer \/ peer it will use Noise to encrypt all of the traffic. Otherwise it will refuse to connect."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"configure5.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The last module we need to import is LibP2PMPLEX. Mplex is a multiplexer that lets us open multiple stream over a single TCP connection."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"configure6.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"We’ll cover this function call more in the next section."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"configure7.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add some log lines so we know what’s happening when we run the app later from the terminal."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null}]},{"anchor":"Configure-your-LibP2P-Routes","title":"Configure your LibP2P Routes","contentSection":[{"kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Now that we have the libp2p server configures we have to tell it how to handle certain inbound requests."}]}],"mediaPosition":"trailing"}],"stepsSection":[{"code":"routes1.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Click on the routes.swift file in the file browser on the left hand side of XCode. And import LibP2P."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"routes2.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Define a group that will handle the "},{"type":"codeVoice","code":"echo"},{"type":"text","text":" protocol"}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"routes3.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Within the "},{"type":"codeVoice","code":"echo"},{"type":"text","text":" group, we can specify a version handler."},{"type":"text","text":" "},{"type":"text","text":"In this case we define our version to be "},{"type":"codeVoice","code":"1.0.0"},{"type":"text","text":" "},{"type":"text","text":"The route is handled by a closure that accepts a "},{"type":"codeVoice","code":"Request"},{"type":"text","text":" and returns any "},{"type":"codeVoice","code":"ResponseEncodable"},{"type":"text","text":" object, a "},{"type":"codeVoice","code":"String"},{"type":"text","text":" in this case."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"routes4.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Also, we know all inbound and outbound data should be delimited with a new-line character so we can install the "},{"type":"codeVoice","code":".newLineDelimited"},{"type":"text","text":" channel handler. This is similar to the concept of Middleware in frameworks like Swift Vapor and Node Express."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"routes5.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Make sure we only handle inbound streams (libp2p can pass outbound stream to this same handler if you’d like to reuse code)."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"routes6.swift","content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Request"},{"type":"text","text":"s have a "},{"type":"codeVoice","code":"logger"},{"type":"text","text":" attached to them. Here we use the logger to print a detailed description of the "},{"type":"codeVoice","code":"Request"},{"type":"text","text":" for more info."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"routes7.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Stream "},{"type":"codeVoice","code":"Request"},{"type":"text","text":"s consist of different events. This route handler will be called each time an event happens. The first event we’ll handle is the "},{"type":"codeVoice","code":".ready"},{"type":"text","text":" event."},{"type":"text","text":" "},{"type":"text","text":"Being notified of a new\/ready stream is useful in a few situations."},{"type":"text","text":" "},{"type":"text","text":"When we’re the initiator of a stream, we can use this moment to send our data to the remote peer"},{"type":"text","text":" "},{"type":"text","text":"Or sometimes we’re expected to respond to an empty inbound request (such as with the "},{"type":"codeVoice","code":"ipfs\/id\/1.0.0"},{"type":"text","text":" protocol), this is the perfect time to pass the data along to the remote peer."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"routes8.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":".data"},{"type":"text","text":" event gets triggered everytime there’s a new batch of data ready to be handled"},{"type":"text","text":" "},{"type":"text","text":"Because we’re an Echo server, we simply return (echo) the inbound data back to the client. But before we do so, we log the echo message so we can watch requests happen in real time in the terminal."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"routes9.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":".close"},{"type":"text","text":" event gets called when a stream closes (either write or read)"},{"type":"text","text":" "},{"type":"text","text":"The "},{"type":"codeVoice","code":".error"},{"type":"text","text":" event gets called when an error has occured on the stream"},{"type":"text","text":" "},{"type":"text","text":"In this situation, we just respond to both with a "},{"type":"codeVoice","code":".close"},{"type":"text","text":" stream request"}]}],"caption":[],"type":"step","runtimePreview":null,"media":null}]},{"anchor":"Build-and-run-the-app!","title":"Build and run the app!","contentSection":[{"kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"After all of our changes, let’s make sure the app still builds, and if so, let’s test it out!"}]}],"mediaPosition":"trailing"}],"stepsSection":[{"code":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Click the play button in the top left hand corner of XCode."}]}],"caption":[],"type":"step","runtimePreview":null,"media":"placeholder-image.png"},{"code":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The app should build and run. The console should display text indicating that the server started and is listening for inbound requests on the port specified."}]}],"caption":[],"type":"step","runtimePreview":null,"media":"placeholder-image.png"}]}]}],"identifier":{"url":"doc:\/\/LibP2P\/tutorials\/LibP2P\/Configure-Echo-Server","interfaceLanguage":"swift"},"kind":"project","metadata":{"title":"Configuring an Echo Server","categoryPathComponent":"EchoServer","role":"project","category":"Simple Echo Server"},"hierarchy":{"modules":[{"reference":"doc:\/\/LibP2P\/tutorials\/EchoServer\/Manually-Creating-an-executable-app","projects":[{"reference":"doc:\/\/LibP2P\/tutorials\/LibP2P\/Create-Executable-Package","sections":[{"kind":"task","reference":"doc:\/\/LibP2P\/tutorials\/LibP2P\/Create-Executable-Package#Create-an-executable-app-using-SPM"},{"kind":"task","reference":"doc:\/\/LibP2P\/tutorials\/LibP2P\/Create-Executable-Package#Create-the-appropriate-folder-structure"},{"kind":"task","reference":"doc:\/\/LibP2P\/tutorials\/LibP2P\/Create-Executable-Package#Import-the-LibP2P-Package"},{"kind":"task","reference":"doc:\/\/LibP2P\/tutorials\/LibP2P\/Create-Executable-Package#Build-the-project!"}]}]},{"reference":"doc:\/\/LibP2P\/tutorials\/EchoServer\/Creating-an-executable-app-by-Cloning-a-Template","projects":[{"reference":"doc:\/\/LibP2P\/tutorials\/LibP2P\/Clone-Executable-Template","sections":[{"kind":"task","reference":"doc:\/\/LibP2P\/tutorials\/LibP2P\/Clone-Executable-Template#Cloning-the-Template-App-Repository"},{"kind":"task","reference":"doc:\/\/LibP2P\/tutorials\/LibP2P\/Clone-Executable-Template#Build-the-project!"}]}]},{"reference":"doc:\/\/LibP2P\/tutorials\/EchoServer\/Configuring-a-swift-libp2p-app","projects":[{"reference":"doc:\/\/LibP2P\/tutorials\/LibP2P\/Configure-Echo-Server","sections":[{"kind":"task","reference":"doc:\/\/LibP2P\/tutorials\/LibP2P\/Configure-Echo-Server#Import-the-standard-LibP2P-Packages"},{"kind":"task","reference":"doc:\/\/LibP2P\/tutorials\/LibP2P\/Configure-Echo-Server#Configure-your-LibP2P-Node"},{"kind":"task","reference":"doc:\/\/LibP2P\/tutorials\/LibP2P\/Configure-Echo-Server#Configure-your-LibP2P-Routes"},{"kind":"task","reference":"doc:\/\/LibP2P\/tutorials\/LibP2P\/Configure-Echo-Server#Build-and-run-the-app!"}]}]}],"reference":"doc:\/\/LibP2P\/tutorials\/EchoServer","paths":[["doc:\/\/LibP2P\/tutorials\/EchoServer","doc:\/\/LibP2P\/tutorials\/EchoServer\/$volume","doc:\/\/LibP2P\/tutorials\/EchoServer\/Configuring-a-swift-libp2p-app"]]},"references":{"routes5.swift":{"syntax":"swift","content":["\/\/","\/\/  routes.swift","\/\/","","import LibP2P","","\/\/ Route \/ Protocol Handlers","func routes(_ app: Application) throws {","    ","    \/\/\/ Define a group that will handle the `echo` protocol","    app.group(\"echo\") { routes in","        ","        \/\/\/ Within the `echo` group, we can specify a version handler","        routes.on(\"1.0.0\", handlers: [.newLineDelimited]) { req -> ResponseType<String> in","            ","            \/\/\/ Make sure we only handle inbound streams (libp2p can pass outbound stream to this same handler if you'd like to reuse code)","            guard req.streamDirection == .inbound else { return .close }","            ","        }","    }","}"],"fileName":"routes.swift","identifier":"routes5.swift","type":"file","fileType":"swift","highlights":[{"line":16},{"line":17},{"line":18}]},"doc://LibP2P/tutorials/LibP2P/Create-Executable-Package#Import-the-LibP2P-Package":{"role":"pseudoSymbol","title":"Import the LibP2P Package","abstract":[{"type":"text","text":"In this tutorial we’ll create an executable app using the Swift Package Manager (SPM) and then include the packages we need in order to create a basic libp2p node."}],"identifier":"doc:\/\/LibP2P\/tutorials\/LibP2P\/Create-Executable-Package#Import-the-LibP2P-Package","kind":"section","type":"section","url":"\/tutorials\/libp2p\/create-executable-package#Import-the-LibP2P-Package"},"configure5.swift":{"syntax":"swift","content":["import LibP2P","import LibP2PNoise","import LibP2PMPLEX","","\/\/ configure your application","public func configure(_ app: Application) throws {","    ","    \/\/ We can specify the global log level here","    app.logger.logLevel = .notice","","    \/\/ Configure your networking stack...","    app.listen(.tcp(host: \"127.0.0.1\", port: 10000))","    app.security.use(.noise)","    app.muxers.use(.mplex)","}"],"fileName":"configure.swift","identifier":"configure5.swift","type":"file","fileType":"swift","highlights":[{"line":3},{"line":14}]},"routes3.swift":{"syntax":"swift","content":["\/\/","\/\/  routes.swift","\/\/","","import LibP2P","","\/\/ Route \/ Protocol Handlers","func routes(_ app: Application) throws {","    ","    \/\/\/ Define a group that will handle the `echo` protocol","    app.group(\"echo\") { routes in","        ","        \/\/\/ Within the `echo` group, we can specify a version handler","        routes.on(\"1.0.0\") { req -> ResponseType<String> in","            ","        }","    }","}"],"fileName":"routes.swift","identifier":"routes3.swift","type":"file","fileType":"swift","highlights":[{"line":13},{"line":14},{"line":15},{"line":16}]},"doc://LibP2P/tutorials/LibP2P/Clone-Executable-Template":{"role":"project","title":"Cloning an executable swift-libp2p template app","estimatedTime":"3min","abstract":[{"type":"text","text":"In this tutorial we’ll cover the process of starting a new swift-libp2p executable app by cloning a github template repository."}],"identifier":"doc:\/\/LibP2P\/tutorials\/LibP2P\/Clone-Executable-Template","kind":"project","type":"topic","url":"\/tutorials\/libp2p\/clone-executable-template"},"configure1.swift":{"syntax":"swift","content":["import LibP2P","","\/\/ configure your application","public func configure(_ app: Application) throws {","    ","}"],"fileName":"configure.swift","identifier":"configure1.swift","type":"file","fileType":"swift","highlights":[]},"package6.swift":{"syntax":"swift","content":["\/\/ swift-tools-version: 5.6","\/\/ The swift-tools-version declares the minimum version of Swift required to build this package.","","import PackageDescription","","let package = Package(","    name: \"libp2p-app-template\",","    platforms: [","        .macOS(.v10_15)","    ],","    dependencies: [","        \/\/ Dependencies declare other packages that this package depends on.","        \/\/ .package(url: \/* package url *\/, from: \"1.0.0\"),","        .package(url: \"https:\/\/github.com\/swift-libp2p\/swift-libp2p\", .upToNextMajor(from: \"0.1.0\")),","        \/\/ Noise Security Module","        .package(url: \"https:\/\/github.com\/swift-libp2p\/swift-libp2p-noise\", .upToNextMajor(from: \"0.1.0\")),","    ],","    targets: [","        \/\/ Targets are the basic building blocks of a package. A target can define a module or a test suite.","        \/\/ Targets can depend on other targets in this package, and on products in packages this package depends on.","        .target(","            name: \"App\",","            dependencies: [","                .product(name: \"LibP2P\", package: \"swift-libp2p\"),","                .product(name: \"LibP2PNoise\", package: \"swift-libp2p-noise\"),","            ]),","        .executableTarget(","            name: \"Run\",","            dependencies: [.target(name: \"App\")]),","        .testTarget(","            name: \"AppTests\",","            dependencies: [","                .target(name: \"App\")","            ]),","    ]",")"],"fileName":"Package.swift","identifier":"package6.swift","type":"file","fileType":"swift","highlights":[{"line":15},{"line":16},{"line":25}]},"routes6.swift":{"syntax":"swift","content":["\/\/","\/\/  routes.swift","\/\/","","import LibP2P","","\/\/ Route \/ Protocol Handlers","func routes(_ app: Application) throws {","    ","    \/\/\/ Define a group that will handle the `echo` protocol","    app.group(\"echo\") { routes in","        ","        \/\/\/ Within the `echo` group, we can specify a version handler","        routes.on(\"1.0.0\", handlers: [.newLineDelimited]) { req -> ResponseType<String> in","            ","            \/\/\/ Make sure we only handle inbound streams (libp2p can pass outbound stream to this same handler if you'd like to reuse code)","            guard req.streamDirection == .inbound else { return .close }","            ","            \/\/\/ `Request`s have a `logger` attached to them. Here we use the logger to print a detailed description of the `Request` for more info...","            req.logger.info(\"\\(req.detailedDescription)\")","            ","        }","    }","}"],"fileName":"routes.swift","identifier":"routes6.swift","type":"file","fileType":"swift","highlights":[{"line":19},{"line":20},{"line":21}]},"doc://LibP2P/tutorials/LibP2P/Clone-Executable-Template#Cloning-the-Template-App-Repository":{"role":"pseudoSymbol","title":"Cloning the Template App Repository","abstract":[{"type":"text","text":"In this tutorial we’ll cover the process of starting a new swift-libp2p executable app by cloning a github template repository."}],"identifier":"doc:\/\/LibP2P\/tutorials\/LibP2P\/Clone-Executable-Template#Cloning-the-Template-App-Repository","kind":"section","type":"section","url":"\/tutorials\/libp2p\/clone-executable-template#Cloning-the-Template-App-Repository"},"configure3.swift":{"syntax":"swift","content":["import LibP2P","","\/\/ configure your application","public func configure(_ app: Application) throws {","    ","    \/\/ We can specify the global log level here","    app.logger.logLevel = .notice","","    \/\/ Configure your networking stack...","    app.listen(.tcp(host: \"127.0.0.1\", port: 10000))","}"],"fileName":"configure.swift","identifier":"configure3.swift","type":"file","fileType":"swift","highlights":[{"line":8},{"line":9},{"line":10}]},"doc://LibP2P/tutorials/LibP2P/Configure-Echo-Server#Configure-your-LibP2P-Node":{"role":"pseudoSymbol","title":"Configure your LibP2P Node","abstract":[{"type":"text","text":"In this tutorial we’re going to configure our swift-libp2p node to act as an Echo server. We’ll explore the project layout, server configuration and route handlers."}],"identifier":"doc:\/\/LibP2P\/tutorials\/LibP2P\/Configure-Echo-Server#Configure-your-LibP2P-Node","kind":"section","type":"section","url":"\/tutorials\/libp2p\/configure-echo-server#Configure-your-LibP2P-Node"},"configure2.swift":{"syntax":"swift","content":["import LibP2P","","\/\/ configure your application","public func configure(_ app: Application) throws {","    ","    \/\/ We can specify the global log level here","    app.logger.logLevel = .notice","}"],"fileName":"configure.swift","identifier":"configure2.swift","type":"file","fileType":"swift","highlights":[{"line":6},{"line":7}]},"package7.swift":{"syntax":"swift","content":["\/\/ swift-tools-version: 5.6","\/\/ The swift-tools-version declares the minimum version of Swift required to build this package.","","import PackageDescription","","let package = Package(","    name: \"libp2p-app-template\",","    platforms: [","        .macOS(.v10_15)","    ],","    dependencies: [","        \/\/ Dependencies declare other packages that this package depends on.","        \/\/ .package(url: \/* package url *\/, from: \"1.0.0\"),","        .package(url: \"https:\/\/github.com\/swift-libp2p\/swift-libp2p\", .upToNextMajor(from: \"0.1.0\")),","        \/\/ Noise Security Module","        .package(url: \"https:\/\/github.com\/swift-libp2p\/swift-libp2p-noise\", .upToNextMajor(from: \"0.1.0\")),","        \/\/ MPLEX Muxer Module","        .package(url: \"https:\/\/github.com\/swift-libp2p\/swift-libp2p-mplex\", .upToNextMajor(from: \"0.1.0\")),","    ],","    targets: [","        \/\/ Targets are the basic building blocks of a package. A target can define a module or a test suite.","        \/\/ Targets can depend on other targets in this package, and on products in packages this package depends on.","        .target(","            name: \"App\",","            dependencies: [","                .product(name: \"LibP2P\", package: \"swift-libp2p\"),","                .product(name: \"LibP2PNoise\", package: \"swift-libp2p-noise\"),","                .product(name: \"LibP2PMPLEX\", package: \"swift-libp2p-mplex\"),","            ]),","        .executableTarget(","            name: \"Run\",","            dependencies: [.target(name: \"App\")]),","        .testTarget(","            name: \"AppTests\",","            dependencies: [","                .target(name: \"App\")","            ]),","    ]",")"],"fileName":"Package.swift","identifier":"package7.swift","type":"file","fileType":"swift","highlights":[{"line":17},{"line":18},{"line":28}]},"doc://LibP2P/tutorials/LibP2P/Create-Executable-Package#Create-an-executable-app-using-SPM":{"role":"pseudoSymbol","title":"Create an executable app using SPM","abstract":[{"type":"text","text":"In this tutorial we’ll create an executable app using the Swift Package Manager (SPM) and then include the packages we need in order to create a basic libp2p node."}],"identifier":"doc:\/\/LibP2P\/tutorials\/LibP2P\/Create-Executable-Package#Create-an-executable-app-using-SPM","kind":"section","type":"section","url":"\/tutorials\/libp2p\/create-executable-package#Create-an-executable-app-using-SPM"},"doc://LibP2P/tutorials/LibP2P/Configure-Echo-Server#Import-the-standard-LibP2P-Packages":{"role":"pseudoSymbol","title":"Import the standard LibP2P Packages","abstract":[{"type":"text","text":"In this tutorial we’re going to configure our swift-libp2p node to act as an Echo server. We’ll explore the project layout, server configuration and route handlers."}],"identifier":"doc:\/\/LibP2P\/tutorials\/LibP2P\/Configure-Echo-Server#Import-the-standard-LibP2P-Packages","kind":"section","type":"section","url":"\/tutorials\/libp2p\/configure-echo-server#Import-the-standard-LibP2P-Packages"},"doc://LibP2P/tutorials/LibP2P/Configure-Echo-Server#Build-and-run-the-app!":{"role":"pseudoSymbol","title":"Build and run the app!","abstract":[{"type":"text","text":"In this tutorial we’re going to configure our swift-libp2p node to act as an Echo server. We’ll explore the project layout, server configuration and route handlers."}],"identifier":"doc:\/\/LibP2P\/tutorials\/LibP2P\/Configure-Echo-Server#Build-and-run-the-app!","kind":"section","type":"section","url":"\/tutorials\/libp2p\/configure-echo-server#Build-and-run-the-app!"},"routes9.swift":{"syntax":"swift","content":["\/\/","\/\/  routes.swift","\/\/","","import LibP2P","","\/\/ Route \/ Protocol Handlers","func routes(_ app: Application) throws {","    ","    \/\/\/ Define a group that will handle the `echo` protocol","    app.group(\"echo\") { routes in","        ","        \/\/\/ Within the `echo` group, we can specify a version handler","        routes.on(\"1.0.0\", handlers: [.newLineDelimited]) { req -> ResponseType<String> in","            ","            \/\/\/ Make sure we only handle inbound streams (libp2p can pass outbound stream to this same handler if you'd like to reuse code)","            guard req.streamDirection == .inbound else { return .close }","            ","            \/\/\/ `Request`s have a `logger` attached to them. Here we use the logger to print a detailed description of the `Request` for more info...","            req.logger.info(\"\\(req.detailedDescription)\")","            ","            \/\/\/ Stream `Request`s consist of different events. This route handler will be called each time an event happens","            switch req.event {","            case .ready:","                return .stayOpen","            ","            case .data(let payload):","                if let str = String(data: Data(payload.readableBytesView), encoding: .utf8) {","                    req.logger.notice(\"Echoing: \\(str)\")","                    return .respondThenClose(str)","                } else {","                    req.logger.error(\"Invalid UTF8 String Encountered\")","                    return .close","                }","                ","            case .closed, .error:","                return .close","                ","            }","        }","    }","}"],"fileName":"routes.swift","identifier":"routes9.swift","type":"file","fileType":"swift","highlights":[{"line":35},{"line":36},{"line":37},{"line":38}]},"configure4.swift":{"syntax":"swift","content":["import LibP2P","import LibP2PNoise","","\/\/ configure your application","public func configure(_ app: Application) throws {","    ","    \/\/ We can specify the global log level here","    app.logger.logLevel = .notice","","    \/\/ Configure your networking stack...","    app.listen(.tcp(host: \"127.0.0.1\", port: 10000))","    app.security.use(.noise)","}"],"fileName":"configure.swift","identifier":"configure4.swift","type":"file","fileType":"swift","highlights":[{"line":2},{"line":12}]},"routes2.swift":{"syntax":"swift","content":["\/\/","\/\/  routes.swift","\/\/","","import LibP2P","","\/\/ Route \/ Protocol Handlers","func routes(_ app: Application) throws {","    ","    \/\/\/ Define a group that will handle the `echo` protocol","    app.group(\"echo\") { routes in","        ","       ","    }","}"],"fileName":"routes.swift","identifier":"routes2.swift","type":"file","fileType":"swift","highlights":[{"line":10},{"line":11},{"line":12},{"line":13},{"line":14}]},"doc://LibP2P/tutorials/LibP2P/Create-Executable-Package#Create-the-appropriate-folder-structure":{"role":"pseudoSymbol","title":"Create the appropriate folder structure","abstract":[{"type":"text","text":"In this tutorial we’ll create an executable app using the Swift Package Manager (SPM) and then include the packages we need in order to create a basic libp2p node."}],"identifier":"doc:\/\/LibP2P\/tutorials\/LibP2P\/Create-Executable-Package#Create-the-appropriate-folder-structure","kind":"section","type":"section","url":"\/tutorials\/libp2p\/create-executable-package#Create-the-appropriate-folder-structure"},"doc://LibP2P/tutorials/EchoServer/Creating-an-executable-app-by-Cloning-a-Template":{"role":"article","title":"Creating an executable app by Cloning a Template","abstract":[],"identifier":"doc:\/\/LibP2P\/tutorials\/EchoServer\/Creating-an-executable-app-by-Cloning-a-Template","kind":"article","type":"topic","url":"\/tutorials\/echoserver\/creating-an-executable-app-by-cloning-a-template"},"routes8.swift":{"syntax":"swift","content":["\/\/","\/\/  routes.swift","\/\/","","import LibP2P","","\/\/ Route \/ Protocol Handlers","func routes(_ app: Application) throws {","    ","    \/\/\/ Define a group that will handle the `echo` protocol","    app.group(\"echo\") { routes in","        ","        \/\/\/ Within the `echo` group, we can specify a version handler","        routes.on(\"1.0.0\", handlers: [.newLineDelimited]) { req -> ResponseType<String> in","            ","            \/\/\/ Make sure we only handle inbound streams (libp2p can pass outbound stream to this same handler if you'd like to reuse code)","            guard req.streamDirection == .inbound else { return .close }","            ","            \/\/\/ `Request`s have a `logger` attached to them. Here we use the logger to print a detailed description of the `Request` for more info...","            req.logger.info(\"\\(req.detailedDescription)\")","            ","            \/\/\/ Stream `Request`s consist of different events. This route handler will be called each time an event happens","            switch req.event {","            case .ready:","                return .stayOpen","            ","            case .data(let payload):","                if let str = String(data: Data(payload.readableBytesView), encoding: .utf8) {","                    req.logger.notice(\"Echoing: \\(str)\")","                    return .respondThenClose(str)","                } else {","                    req.logger.error(\"Invalid UTF8 String Encountered\")","                    return .close","                }","            ","            }","        }","    }","}"],"fileName":"routes.swift","identifier":"routes8.swift","type":"file","fileType":"swift","highlights":[{"line":27},{"line":28},{"line":29},{"line":30},{"line":31},{"line":32},{"line":33},{"line":34},{"line":35}]},"placeholder-image.png":{"alt":"A screenshot of the xcode console showing a running echo server.","type":"image","identifier":"placeholder-image.png","variants":[{"url":"\/images\/placeholder-image@2x.png","traits":["2x","light"]},{"url":"\/images\/placeholder-image~dark@2x.png","traits":["2x","dark"]}]},"doc://LibP2P/tutorials/EchoServer/Configuring-a-swift-libp2p-app":{"role":"article","title":"Configuring a swift-libp2p app","abstract":[],"identifier":"doc:\/\/LibP2P\/tutorials\/EchoServer\/Configuring-a-swift-libp2p-app","kind":"article","type":"topic","url":"\/tutorials\/echoserver\/configuring-a-swift-libp2p-app"},"doc://LibP2P/tutorials/EchoServer/Manually-Creating-an-executable-app":{"role":"article","title":"Manually Creating an executable app","abstract":[],"identifier":"doc:\/\/LibP2P\/tutorials\/EchoServer\/Manually-Creating-an-executable-app","kind":"article","type":"topic","url":"\/tutorials\/echoserver\/manually-creating-an-executable-app"},"doc://LibP2P/tutorials/LibP2P/Clone-Executable-Template#Build-the-project!":{"role":"pseudoSymbol","title":"Build the project!","abstract":[{"type":"text","text":"In this tutorial we’ll cover the process of starting a new swift-libp2p executable app by cloning a github template repository."}],"identifier":"doc:\/\/LibP2P\/tutorials\/LibP2P\/Clone-Executable-Template#Build-the-project!","kind":"section","type":"section","url":"\/tutorials\/libp2p\/clone-executable-template#Build-the-project!"},"routes1.swift":{"syntax":"swift","content":["\/\/","\/\/  routes.swift","\/\/","","import LibP2P","","\/\/ Route \/ Protocol Handlers","func routes(_ app: Application) throws {","    ","}"],"fileName":"routes.swift","identifier":"routes1.swift","type":"file","fileType":"swift","highlights":[]},"doc://LibP2P/tutorials/LibP2P/Configure-Echo-Server":{"role":"project","title":"Configuring an Echo Server","estimatedTime":"10min","abstract":[{"type":"text","text":"In this tutorial we’re going to configure our swift-libp2p node to act as an Echo server. We’ll explore the project layout, server configuration and route handlers."}],"identifier":"doc:\/\/LibP2P\/tutorials\/LibP2P\/Configure-Echo-Server","kind":"project","type":"topic","url":"\/tutorials\/libp2p\/configure-echo-server"},"doc://LibP2P/tutorials/LibP2P/Create-Executable-Package":{"role":"project","title":"Manually creating an executable swift-libp2p app","estimatedTime":"10min","abstract":[{"type":"text","text":"In this tutorial we’ll create an executable app using the Swift Package Manager (SPM) and then include the packages we need in order to create a basic libp2p node."}],"identifier":"doc:\/\/LibP2P\/tutorials\/LibP2P\/Create-Executable-Package","kind":"project","type":"topic","url":"\/tutorials\/libp2p\/create-executable-package"},"configure7.swift":{"syntax":"swift","content":["import LibP2P","import LibP2PNoise","import LibP2PMPLEX","","\/\/ configure your application","public func configure(_ app: Application) throws {","    ","    \/\/ We can specify the global log level here","    app.logger.logLevel = .notice","","    \/\/ Configure your networking stack...","    app.listen(.tcp(host: \"127.0.0.1\", port: 10000))","    app.security.use(.noise)","    app.muxers.use(.mplex)","    ","    \/\/ Register routes","    try routes(app)","    ","    \/\/ Log out some info to the terminal \/ console","    app.logger.notice(\"Echo Server listening at \\(app.listenAddresses.first!)\/p2p\/\\(app.peerID.b58String).\")","    app.logger.notice(\"Press ^C to exit.\")","}"],"fileName":"configure.swift","identifier":"configure7.swift","type":"file","fileType":"swift","highlights":[{"line":18},{"line":19},{"line":20},{"line":21}]},"package5.swift":{"syntax":"swift","content":["\/\/ swift-tools-version: 5.6","\/\/ The swift-tools-version declares the minimum version of Swift required to build this package.","","import PackageDescription","","let package = Package(","    name: \"libp2p-app-template\",","    platforms: [","        .macOS(.v10_15)","    ],","    dependencies: [","        \/\/ Dependencies declare other packages that this package depends on.","        \/\/ .package(url: \/* package url *\/, from: \"1.0.0\"),","        .package(url: \"https:\/\/github.com\/swift-libp2p\/swift-libp2p\", .upToNextMajor(from: \"0.1.0\")),","    ],","    targets: [","        \/\/ Targets are the basic building blocks of a package. A target can define a module or a test suite.","        \/\/ Targets can depend on other targets in this package, and on products in packages this package depends on.","        .target(","            name: \"App\",","            dependencies: [","                .product(name: \"LibP2P\", package: \"swift-libp2p\"),","            ]),","        .executableTarget(","            name: \"Run\",","            dependencies: [.target(name: \"App\")]),","        .testTarget(","            name: \"AppTests\",","            dependencies: [","                .target(name: \"App\")","            ]),","    ]",")"],"fileName":"Package.swift","identifier":"package5.swift","type":"file","fileType":"swift","highlights":[]},"routes4.swift":{"syntax":"swift","content":["\/\/","\/\/  routes.swift","\/\/","","import LibP2P","","\/\/ Route \/ Protocol Handlers","func routes(_ app: Application) throws {","    ","    \/\/\/ Define a group that will handle the `echo` protocol","    app.group(\"echo\") { routes in","        ","        \/\/\/ Within the `echo` group, we can specify a version handler","        routes.on(\"1.0.0\", handlers: [.newLineDelimited]) { req -> ResponseType<String> in","            ","        }","    }","}"],"fileName":"routes.swift","identifier":"routes4.swift","type":"file","fileType":"swift","highlights":[{"line":14}]},"doc://LibP2P/tutorials/LibP2P/Configure-Echo-Server#Configure-your-LibP2P-Routes":{"role":"pseudoSymbol","title":"Configure your LibP2P Routes","abstract":[{"type":"text","text":"In this tutorial we’re going to configure our swift-libp2p node to act as an Echo server. We’ll explore the project layout, server configuration and route handlers."}],"identifier":"doc:\/\/LibP2P\/tutorials\/LibP2P\/Configure-Echo-Server#Configure-your-LibP2P-Routes","kind":"section","type":"section","url":"\/tutorials\/libp2p\/configure-echo-server#Configure-your-LibP2P-Routes"},"configure6.swift":{"syntax":"swift","content":["import LibP2P","import LibP2PNoise","import LibP2PMPLEX","","\/\/ configure your application","public func configure(_ app: Application) throws {","    ","    \/\/ We can specify the global log level here","    app.logger.logLevel = .notice","","    \/\/ Configure your networking stack...","    app.listen(.tcp(host: \"127.0.0.1\", port: 10000))","    app.security.use(.noise)","    app.muxers.use(.mplex)","    ","    \/\/ Register routes","    try routes(app)","}"],"fileName":"configure.swift","identifier":"configure6.swift","type":"file","fileType":"swift","highlights":[{"line":15},{"line":16},{"line":17}]},"doc://LibP2P/tutorials/EchoServer":{"role":"overview","title":"Getting started with libp2p","abstract":[{"type":"text","text":"This tutorial will guide you through the creation of your first libp2p app, a simple server, that echos all responses it receives."}],"identifier":"doc:\/\/LibP2P\/tutorials\/EchoServer","kind":"overview","type":"topic","url":"\/tutorials\/echoserver"},"routes7.swift":{"syntax":"swift","content":["\/\/","\/\/  routes.swift","\/\/","","import LibP2P","","\/\/ Route \/ Protocol Handlers","func routes(_ app: Application) throws {","    ","    \/\/\/ Define a group that will handle the `echo` protocol","    app.group(\"echo\") { routes in","        ","        \/\/\/ Within the `echo` group, we can specify a version handler","        routes.on(\"1.0.0\", handlers: [.newLineDelimited]) { req -> ResponseType<String> in","            ","            \/\/\/ Make sure we only handle inbound streams (libp2p can pass outbound stream to this same handler if you'd like to reuse code)","            guard req.streamDirection == .inbound else { return .close }","            ","            \/\/\/ `Request`s have a `logger` attached to them. Here we use the logger to print a detailed description of the `Request` for more info...","            req.logger.info(\"\\(req.detailedDescription)\")","            ","            \/\/\/ Stream `Request`s consist of different events. This route handler will be called each time an event happens","            switch req.event {","            case .ready:","                return .stayOpen","            ","            }","        }","    }","}"],"fileName":"routes.swift","identifier":"routes7.swift","type":"file","fileType":"swift","highlights":[{"line":22},{"line":23},{"line":24},{"line":25},{"line":26},{"line":27}]},"doc://LibP2P/tutorials/LibP2P/Create-Executable-Package#Build-the-project!":{"role":"pseudoSymbol","title":"Build the project!","abstract":[{"type":"text","text":"In this tutorial we’ll create an executable app using the Swift Package Manager (SPM) and then include the packages we need in order to create a basic libp2p node."}],"identifier":"doc:\/\/LibP2P\/tutorials\/LibP2P\/Create-Executable-Package#Build-the-project!","kind":"section","type":"section","url":"\/tutorials\/libp2p\/create-executable-package#Build-the-project!"}}}