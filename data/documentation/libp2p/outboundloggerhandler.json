{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"final"},{"kind":"text","text":" "},{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"OutboundLoggerHandler"}],"languages":["swift"],"platforms":["macOS"]}]}],"schemaVersion":{"major":0,"minor":2,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/libp2p\/outboundloggerhandler"],"traits":[{"interfaceLanguage":"swift"}]}],"relationshipsSections":[{"identifiers":["doc:\/\/LibP2P\/7NIOCore14ChannelHandlerP","doc:\/\/LibP2P\/7NIOCore22ChannelOutboundHandlerP"],"kind":"relationships","title":"Conforms To","type":"conformsTo"}],"identifier":{"url":"doc:\/\/LibP2P\/documentation\/LibP2P\/OutboundLoggerHandler","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"No overview available."}],"kind":"symbol","metadata":{"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"OutboundLoggerHandler"}],"title":"OutboundLoggerHandler","roleHeading":"Class","role":"symbol","symbolKind":"class","externalID":"s:6LibP2P21OutboundLoggerHandlerC","modules":[{"name":"LibP2P"}],"navigatorTitle":[{"kind":"identifier","text":"OutboundLoggerHandler"}]},"hierarchy":{"paths":[["doc:\/\/LibP2P\/documentation\/LibP2P"]]},"topicSections":[{"title":"Initializers","identifiers":["doc:\/\/LibP2P\/documentation\/LibP2P\/OutboundLoggerHandler\/init()","doc:\/\/LibP2P\/documentation\/LibP2P\/OutboundLoggerHandler\/init(mode:)"]},{"title":"Instance Methods","identifiers":["doc:\/\/LibP2P\/documentation\/LibP2P\/OutboundLoggerHandler\/channelWriteComplete(context:)","doc:\/\/LibP2P\/documentation\/LibP2P\/OutboundLoggerHandler\/errorCaught(context:error:)","doc:\/\/LibP2P\/documentation\/LibP2P\/OutboundLoggerHandler\/write(context:data:promise:)"]},{"title":"Type Aliases","identifiers":["doc:\/\/LibP2P\/documentation\/LibP2P\/OutboundLoggerHandler\/OutboundIn","doc:\/\/LibP2P\/documentation\/LibP2P\/OutboundLoggerHandler\/OutboundOut"]},{"title":"Default Implementations","identifiers":["doc:\/\/LibP2P\/documentation\/LibP2P\/OutboundLoggerHandler\/ChannelHandler-Implementations","doc:\/\/LibP2P\/documentation\/LibP2P\/OutboundLoggerHandler\/ChannelOutboundHandler-Implementations"],"generated":true}],"references":{"doc://LibP2P/documentation/LibP2P/OutboundLoggerHandler/OutboundIn":{"role":"symbol","title":"OutboundLoggerHandler.OutboundIn","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"OutboundIn"}],"abstract":[{"type":"text","text":"The type of the outbound data which is wrapped in "},{"type":"codeVoice","code":"NIOAny"},{"type":"text","text":"."}],"identifier":"doc:\/\/LibP2P\/documentation\/LibP2P\/OutboundLoggerHandler\/OutboundIn","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"OutboundIn"}],"url":"\/documentation\/libp2p\/outboundloggerhandler\/outboundin"},"doc://LibP2P/documentation/LibP2P/OutboundLoggerHandler/OutboundOut":{"role":"symbol","title":"OutboundLoggerHandler.OutboundOut","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"OutboundOut"}],"abstract":[{"type":"text","text":"The type of the outbound data which will be forwarded to the next "},{"type":"codeVoice","code":"ChannelOutboundHandler"},{"type":"text","text":" in the "},{"type":"codeVoice","code":"ChannelPipeline"},{"type":"text","text":"."}],"identifier":"doc:\/\/LibP2P\/documentation\/LibP2P\/OutboundLoggerHandler\/OutboundOut","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"OutboundOut"}],"url":"\/documentation\/libp2p\/outboundloggerhandler\/outboundout"},"doc://LibP2P/documentation/LibP2P/OutboundLoggerHandler/init()":{"role":"symbol","title":"init()","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"()"}],"abstract":[],"identifier":"doc:\/\/LibP2P\/documentation\/LibP2P\/OutboundLoggerHandler\/init()","kind":"symbol","type":"topic","url":"\/documentation\/libp2p\/outboundloggerhandler\/init()"},"doc://LibP2P/documentation/LibP2P/OutboundLoggerHandler/ChannelOutboundHandler-Implementations":{"role":"collectionGroup","title":"ChannelOutboundHandler Implementations","abstract":[],"identifier":"doc:\/\/LibP2P\/documentation\/LibP2P\/OutboundLoggerHandler\/ChannelOutboundHandler-Implementations","kind":"article","type":"topic","url":"\/documentation\/libp2p\/outboundloggerhandler\/channeloutboundhandler-implementations"},"doc://LibP2P/7NIOCore14ChannelHandlerP":{"type":"unresolvable","title":"NIOCore.ChannelHandler","identifier":"doc:\/\/LibP2P\/7NIOCore14ChannelHandlerP"},"https://libp2p.io":{"title":"libp2p","titleInlineContent":[{"type":"text","text":"libp2p"}],"type":"link","identifier":"https:\/\/libp2p.io","url":"https:\/\/libp2p.io"},"doc://LibP2P/documentation/LibP2P":{"role":"collection","title":"LibP2P","abstract":[{"type":"text","text":"A Swift implementation of the modular networking stack "},{"type":"reference","isActive":true,"identifier":"https:\/\/libp2p.io"}],"identifier":"doc:\/\/LibP2P\/documentation\/LibP2P","kind":"symbol","type":"topic","url":"\/documentation\/libp2p"},"doc://LibP2P/7NIOCore22ChannelOutboundHandlerP":{"type":"unresolvable","title":"NIOCore.ChannelOutboundHandler","identifier":"doc:\/\/LibP2P\/7NIOCore22ChannelOutboundHandlerP"},"doc://LibP2P/documentation/LibP2P/OutboundLoggerHandler":{"role":"symbol","title":"OutboundLoggerHandler","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"OutboundLoggerHandler"}],"abstract":[],"identifier":"doc:\/\/LibP2P\/documentation\/LibP2P\/OutboundLoggerHandler","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"OutboundLoggerHandler"}],"url":"\/documentation\/libp2p\/outboundloggerhandler"},"doc://LibP2P/documentation/LibP2P/OutboundLoggerHandler/channelWriteComplete(context:)":{"role":"symbol","title":"channelWriteComplete(context:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"channelWriteComplete"},{"kind":"text","text":"("},{"kind":"externalParam","text":"context"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"ChannelHandlerContext","preciseIdentifier":"s:7NIOCore21ChannelHandlerContextC"},{"kind":"text","text":")"}],"abstract":[],"identifier":"doc:\/\/LibP2P\/documentation\/LibP2P\/OutboundLoggerHandler\/channelWriteComplete(context:)","kind":"symbol","type":"topic","url":"\/documentation\/libp2p\/outboundloggerhandler\/channelwritecomplete(context:)"},"doc://LibP2P/documentation/LibP2P/OutboundLoggerHandler/init(mode:)":{"role":"symbol","title":"init(mode:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"mode"},{"kind":"text","text":": LibP2P"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Mode","preciseIdentifier":"s:10LibP2PCore4ModeO"},{"kind":"text","text":")"}],"abstract":[],"identifier":"doc:\/\/LibP2P\/documentation\/LibP2P\/OutboundLoggerHandler\/init(mode:)","kind":"symbol","type":"topic","url":"\/documentation\/libp2p\/outboundloggerhandler\/init(mode:)"},"doc://LibP2P/documentation/LibP2P/OutboundLoggerHandler/errorCaught(context:error:)":{"role":"symbol","title":"errorCaught(context:error:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"errorCaught"},{"kind":"text","text":"("},{"kind":"externalParam","text":"context"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"ChannelHandlerContext","preciseIdentifier":"s:7NIOCore21ChannelHandlerContextC"},{"kind":"text","text":", "},{"kind":"externalParam","text":"error"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Error","preciseIdentifier":"s:s5ErrorP"},{"kind":"text","text":")"}],"abstract":[],"identifier":"doc:\/\/LibP2P\/documentation\/LibP2P\/OutboundLoggerHandler\/errorCaught(context:error:)","kind":"symbol","type":"topic","url":"\/documentation\/libp2p\/outboundloggerhandler\/errorcaught(context:error:)"},"doc://LibP2P/documentation/LibP2P/OutboundLoggerHandler/write(context:data:promise:)":{"role":"symbol","title":"write(context:data:promise:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"write"},{"kind":"text","text":"("},{"kind":"externalParam","text":"context"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"ChannelHandlerContext","preciseIdentifier":"s:7NIOCore21ChannelHandlerContextC"},{"kind":"text","text":", "},{"kind":"externalParam","text":"data"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"NIOAny","preciseIdentifier":"s:7NIOCore6NIOAnyV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"promise"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"EventLoopPromise","preciseIdentifier":"s:7NIOCore16EventLoopPromiseV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":">?)"}],"abstract":[{"type":"text","text":"Called to request a write operation. The write operation will write the messages through the"},{"type":"text","text":" "},{"type":"codeVoice","code":"ChannelPipeline"},{"type":"text","text":". Those are then ready to be flushed to the actual "},{"type":"codeVoice","code":"Channel"},{"type":"text","text":" when"},{"type":"text","text":" "},{"type":"codeVoice","code":"Channel.flush"},{"type":"text","text":" or "},{"type":"codeVoice","code":"ChannelHandlerContext.flush"},{"type":"text","text":" is called."}],"identifier":"doc:\/\/LibP2P\/documentation\/LibP2P\/OutboundLoggerHandler\/write(context:data:promise:)","kind":"symbol","type":"topic","url":"\/documentation\/libp2p\/outboundloggerhandler\/write(context:data:promise:)"},"doc://LibP2P/documentation/LibP2P/OutboundLoggerHandler/ChannelHandler-Implementations":{"role":"collectionGroup","title":"ChannelHandler Implementations","abstract":[],"identifier":"doc:\/\/LibP2P\/documentation\/LibP2P\/OutboundLoggerHandler\/ChannelHandler-Implementations","kind":"article","type":"topic","url":"\/documentation\/libp2p\/outboundloggerhandler\/channelhandler-implementations"}}}